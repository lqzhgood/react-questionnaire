{"version":3,"file":"static/js/745.9ee6acd6.chunk.js","mappings":"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","sources":["demos/pages/Lib/Redux/pages/Count.tsx","demos/pages/Lib/Redux/store/count.ts","demos/pages/Lib/Redux/store/todoList.ts","demos/pages/Lib/ReduxUndo/store.ts","demos/pages/Lib/ReduxUndo/TodoList.tsx","demos/pages/Lib/ReduxUndo/index.tsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { decrease, increase } from '../store/count';\nimport { StateType } from '../store';\nimport { Space } from 'antd';\n\nconst Count = () => {\n    const count = useSelector<StateType, number>(state => state.count);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            <h2>Count</h2>\n            <Space>\n                <span>{count}</span>\n                <button onClick={() => dispatch(increase())}>+</button>\n                <button onClick={() => dispatch(decrease())}>-</button>\n            </Space>\n        </div>\n    );\n};\n\nexport default Count;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst INIT_STATE = 100;\n\nexport const countSlice = createSlice({\n    name: 'count', // module name\n    initialState: INIT_STATE,\n    reducers: {\n        increase(state: number) {\n            return state + 1;\n        },\n        decrease(state: number) {\n            return state - 1;\n        },\n    },\n});\n\nexport const { increase, decrease } = countSlice.actions;\n","import { PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nexport type TodoItemType = {\n    id: string;\n    title: string;\n    completed: boolean;\n};\n\nconst INIT_STATE: TodoItemType[] = [\n    { id: nanoid(5), title: '吃饭', completed: false },\n    { id: nanoid(5), title: '睡觉', completed: true },\n];\n\nexport const todoListSlice = createSlice({\n    name: 'todoList',\n    initialState: INIT_STATE,\n    reducers: {\n        add(state: TodoItemType[], action: PayloadAction<TodoItemType>) {\n            state.push(action.payload);\n        },\n        del(state: TodoItemType[], action: PayloadAction<TodoItemType>) {\n            return state.filter(v => v.id !== action.payload.id);\n        },\n        update(state: TodoItemType[], action: PayloadAction<{ id: string } & Partial<Omit<TodoItemType, 'id'>>>) {\n            const f = state.find(v => v.id === action.payload.id);\n            if (f) Object.assign(f, action.payload);\n        },\n    },\n});\n\nexport const { add, del, update } = todoListSlice.actions;\n","import { configureStore } from '@reduxjs/toolkit';\nimport undoable, { StateWithHistory, excludeAction } from 'redux-undo';\nimport { TodoItemType, todoListSlice } from '../Redux/store/todoList';\nimport { countSlice } from '../Redux/store/count';\n\nexport type StateType = {\n    count: number;\n    todoList: StateWithHistory<TodoItemType[]>;\n};\n\nexport default configureStore({\n    reducer: {\n        count: countSlice.reducer,\n        todoList: undoable(todoListSlice.reducer, {\n            limit: 20,\n            filter: excludeAction(['todoList/update']),\n        }),\n    },\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Space } from 'antd';\nimport { nanoid } from 'nanoid';\nimport { ActionCreators } from 'redux-undo';\n\nimport { StateType } from './store';\nimport { TodoItemType, add, del, update } from '../Redux/store/todoList';\n\nconst TodoList = () => {\n    const todoList = useSelector<StateType, TodoItemType[]>(state => state.todoList.present);\n\n    console.log('todoList', todoList);\n    const dispatch = useDispatch();\n\n    const [text, setText] = useState('');\n\n    return (\n        <>\n            <h2>Todo List</h2>\n            {todoList.map(todo => {\n                const { id, title, completed } = todo;\n\n                return (\n                    <li key={id}>\n                        <Space>\n                            <input\n                                type='checkbox'\n                                checked={completed}\n                                onChange={() => dispatch(update({ id, completed: !completed }))}\n                            />\n                            <span style={completed ? { textDecoration: 'line-through', opacity: 0.5 } : {}}>\n                                {title}\n                            </span>\n                            <button onClick={() => dispatch(del(todo))}>x</button>\n                        </Space>\n                    </li>\n                );\n            })}\n            <input\n                type='text'\n                value={text}\n                placeholder='enter to add todo'\n                onChange={e => setText(e.target.value)}\n                onKeyDown={e => {\n                    if (e.key !== 'Enter') return;\n                    if (!text.trim()) return;\n                    dispatch(add({ id: nanoid(5), title: text, completed: false }));\n                    setText('');\n                }}\n            />\n            <button onClick={() => dispatch(ActionCreators.undo())}>undo</button>\n            <button onClick={() => dispatch(ActionCreators.redo())}>redo</button>\n        </>\n    );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Count from '../Redux/pages/Count';\n\nimport store from './store';\nimport TodoList from './TodoList';\n\nconst ReduxUndo = () => {\n    return (\n        <Provider store={store}>\n            <Count />\n            <hr style={{ margin: '20px 0' }} />\n            <TodoList />\n        </Provider>\n    );\n};\n\nexport default ReduxUndo;\n"],"names":["count","useSelector","state","dispatch","useDispatch","_jsxs","children","_jsx","Space","onClick","increase","decrease","countSlice","createSlice","name","initialState","reducers","_countSlice$actions","actions","INIT_STATE","id","nanoid","title","completed","todoListSlice","add","action","push","payload","del","filter","v","update","f","find","Object","assign","_todoListSlice$action","configureStore","reducer","todoList","undoable","limit","excludeAction","present","console","log","_useState","useState","_useState2","_slicedToArray","text","setText","_Fragment","map","todo","type","checked","onChange","style","textDecoration","opacity","value","placeholder","e","target","onKeyDown","key","trim","ActionCreators","undo","redo","Provider","store","Count","margin","TodoList"],"sourceRoot":""}