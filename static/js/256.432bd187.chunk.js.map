{"version":3,"file":"static/js/256.432bd187.chunk.js","mappings":"mPA4BA,EAxBkB,WACd,IAAAA,GAAyBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAIF,EAAA,GAAEG,EAAQH,EAAA,GACrBI,GAA4BC,EAAAA,EAAAA,YAAWC,GAA/BC,EAAKH,EAALG,MAAOC,EAAQJ,EAARI,SAEf,OACIC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,SACIC,KAAK,OACLC,MAAOX,EACPY,YAAY,oBACZC,SAAU,SAAAC,GAAC,OAAIb,EAASa,EAAEC,OAAOJ,MAAM,EACvCK,UAAW,SAAAF,GACO,UAAVA,EAAEG,KACDjB,EAAKkB,SAEVZ,EAAS,CAAEI,KAAM,MAAOS,QAAS,CAAEC,GAAIC,KAAKC,MAAOC,MAAOvB,KAC1DC,EAAS,IACb,IACF,IACAI,EAAMmB,SAGpB,ECPA,EAfa,WACT,IAAAtB,GAA4BC,EAAAA,EAAAA,YAAWC,GAA/BC,EAAKH,EAALG,MAAOC,EAAQJ,EAARI,SAEf,OACIG,EAAAA,EAAAA,KAAA,MAAAD,SACKH,EAAMoB,KAAI,SAAAC,GAAI,OACXnB,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,QAAAD,SAAOkB,EAAKH,SACZd,EAAAA,EAAAA,KAAA,UAAQkB,QAAS,kBAAMrB,EAAS,CAAEI,KAAM,MAAOS,QAASO,EAAKN,IAAK,EAACZ,SAAC,QAF/DkB,EAAKN,GAGT,KAIrB,E,oBCLA,EALiC,CAC7B,CAAEA,GAAIQ,IAAAA,OAAYR,KAAMG,MAAO,gBAC/B,CAAEH,GAAIQ,IAAAA,OAAYR,KAAMG,MAAO,iBCHpB,SAASM,EAAQxB,EAAmByB,GAC/C,OAAQA,EAAOpB,MACX,IAAK,MACD,OAAOL,EAAM0B,OAAOD,EAAOX,SAC/B,IAAK,MACD,OAAOd,EAAM2B,QAAO,SAAAC,GAAC,OAAIA,EAAEb,KAAOU,EAAOX,OAAO,IACpD,QACI,MAAM,IAAIe,MAAM,uBAE5B,CCTO,IAAM9B,GAAc+B,EAAAA,EAAAA,eAAc,CACrC9B,MAAO+B,EACP9B,SAAU,SAACwB,GAEPO,QAAQC,IAAI,SAAUR,EAC1B,IAgBJ,EAboB,WAChB,IAAAS,GAA0BC,EAAAA,EAAAA,YAAWX,EAASO,GAAaK,GAAA1C,EAAAA,EAAAA,GAAAwC,EAAA,GAApDlC,EAAKoC,EAAA,GAAEnC,EAAQmC,EAAA,GAEtB,OACIlC,EAAAA,EAAAA,MAACH,EAAYsC,SAAQ,CAAC/B,MAAO,CAAEN,MAAAA,EAAOC,SAAAA,GAAWE,SAAA,EAC7CC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAEHC,EAAAA,EAAAA,KAACkC,EAAI,KACLlC,EAAAA,EAAAA,KAACmC,EAAS,MAGtB,C","sources":["demos/pages/Lib/TodoReducer/InputForm.tsx","demos/pages/Lib/TodoReducer/List.tsx","demos/pages/Lib/TodoReducer/store.ts","demos/pages/Lib/TodoReducer/reducer.ts","demos/pages/Lib/TodoReducer/index.tsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\n\nimport { TodoContext } from './index';\n\nconst InputForm = () => {\n    const [text, setValue] = useState('');\n    const { state, dispatch } = useContext(TodoContext);\n\n    return (\n        <div>\n            <input\n                type='text'\n                value={text}\n                placeholder='enter to add todo'\n                onChange={e => setValue(e.target.value)}\n                onKeyDown={e => {\n                    if (e.key !== 'Enter') return;\n                    if (!text.trim()) return;\n\n                    dispatch({ type: 'add', payload: { id: Date.now(), title: text } });\n                    setValue('');\n                }}\n            />\n            #{state.length}\n        </div>\n    );\n};\n\nexport default InputForm;\n","import React, { useContext } from 'react';\n\nimport { TodoContext } from './index';\n\nconst List = () => {\n    const { state, dispatch } = useContext(TodoContext);\n\n    return (\n        <ul>\n            {state.map(todo => (\n                <li key={todo.id}>\n                    <span>{todo.title}</span>\n                    <button onClick={() => dispatch({ type: 'del', payload: todo.id })}>x</button>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default List;\n","import Mock from 'better-mock';\n\nexport type TodoType = {\n    id: string;\n    title: string;\n};\n\nconst initialState: TodoType[] = [\n    { id: Mock.Random.id(), title: '吃饭' },\n    { id: Mock.Random.id(), title: '睡觉' },\n];\n\nexport default initialState;\n","import { TodoType } from './store';\n\nexport type ActionType = {\n    type: string;\n    payload?: any; // eslint-disable-line\n};\nexport default function reducer(state: TodoType[], action: ActionType) {\n    switch (action.type) {\n        case 'add':\n            return state.concat(action.payload);\n        case 'del':\n            return state.filter(v => v.id !== action.payload);\n        default:\n            throw new Error('unknown action type');\n    }\n}\n","import React, { createContext, useReducer } from 'react';\nimport InputForm from './InputForm';\nimport List from './List';\nimport initialState from './store';\nimport reducer, { ActionType } from './reducer';\n\nexport const TodoContext = createContext({\n    state: initialState,\n    dispatch: (action: ActionType): void => {\n        /**/\n        console.log('action', action);\n    },\n});\n\nconst TodoReducer = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <TodoContext.Provider value={{ state, dispatch }}>\n            <p>TodoReducer</p>\n\n            <List />\n            <InputForm />\n        </TodoContext.Provider>\n    );\n};\n\nexport default TodoReducer;\n"],"names":["_useState","useState","_useState2","_slicedToArray","text","setValue","_useContext","useContext","TodoContext","state","dispatch","_jsxs","children","_jsx","type","value","placeholder","onChange","e","target","onKeyDown","key","trim","payload","id","Date","now","title","length","map","todo","onClick","Mock","reducer","action","concat","filter","v","Error","createContext","initialState","console","log","_useReducer","useReducer","_useReducer2","Provider","List","InputForm"],"sourceRoot":""}