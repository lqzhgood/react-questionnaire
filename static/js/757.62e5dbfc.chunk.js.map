{"version":3,"file":"static/js/757.62e5dbfc.chunk.js","mappings":"uNAmBA,SAASA,EAAIC,GAAgD,IAA7CC,EAAED,EAAFC,GAAIC,EAAKF,EAALE,MAChBC,GAAqEC,EAAAA,EAAAA,IAAY,CAAEH,GAAAA,IAA3EI,EAAUF,EAAVE,WAAYC,EAASH,EAATG,UAAWC,EAAUJ,EAAVI,WAAYC,EAASL,EAATK,UAAWC,EAAUN,EAAVM,WAEhDC,EAAQ,CACVF,UAAWG,EAAAA,GAAIC,UAAUC,SAASL,GAClCC,WAAAA,EACAK,OAAQ,iBACRC,OAAQ,SACRC,WAAY,WAEhB,OACIC,EAAAA,EAAAA,MAAA,KAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAAGC,IAAKZ,EAAYG,MAAOA,GAAWL,GAAgBC,GAAS,IAAEL,GAAIA,EAAGmB,SAAA,CAAC,QAC/DnB,EAAG,MAAIC,KAGzB,CA8CA,UAvCA,WACI,IAAAmB,GAA0BC,EAAAA,EAAAA,UAA0B,CAChD,CAAEC,MAAO,KAAMrB,MAAO,iBACtB,CAAEqB,MAAO,KAAMrB,MAAO,iBACtB,CAAEqB,MAAO,KAAMrB,MAAO,mBACxBsB,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAJKK,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAMhBI,GAAUC,EAAAA,EAAAA,KACZC,EAAAA,EAAAA,IAAUC,EAAAA,KACVD,EAAAA,EAAAA,IAAUE,EAAAA,GAAgB,CACtBC,iBAAkBC,EAAAA,MAkB1B,OACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACR,QAASA,EAASS,mBAAoBC,EAAAA,GAAeC,UAfrE,SAAuBC,GACnB,IAAQC,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,KACXA,GAEDD,EAAOxC,KAAOyC,EAAKzC,IACnB0B,GAAS,SAAAD,GACL,IAAMiB,EAAWjB,EAAMkB,WAAU,SAAAC,GAAC,OAAIA,EAAEtB,QAAUkB,EAAOxC,EAAE,IACrD6C,EAAWpB,EAAMkB,WAAU,SAAAC,GAAC,OAAIA,EAAEtB,QAAUmB,EAAKzC,EAAE,IAEzD,OAAO8C,EAAAA,EAAAA,IAAUrB,EAAOiB,EAAUG,EACtC,GAER,EAG8F1B,UACtFe,EAAAA,EAAAA,KAACa,EAAAA,GAAe,CAACtB,MAAOA,EAAMuB,KAAI,SAAAJ,GAAC,OAAA3B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAU2B,GAAC,IAAE5C,GAAI4C,EAAEtB,OAAK,IAAM2B,SAAUC,EAAAA,GAA4B/B,SAClGM,EAAMuB,KAAI,SAAAJ,GAAC,OACRV,EAAAA,EAAAA,KAACpC,GAAImB,EAAAA,EAAAA,GAAA,CAAejB,GAAI4C,EAAEtB,OAAWsB,GAA1BA,EAAEtB,MAA6B,OAK9D,C","sources":["demos/pages/Dnd-sortable.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    DndContext,\n    DragEndEvent,\n    KeyboardSensor,\n    PointerSensor,\n    closestCenter,\n    useSensor,\n    useSensors,\n} from '@dnd-kit/core';\nimport {\n    SortableContext,\n    arrayMove,\n    sortableKeyboardCoordinates,\n    useSortable,\n    verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\nfunction Item({ id, title }: { id: string; title: string }) {\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id });\n\n    const style = {\n        transform: CSS.Transform.toString(transform),\n        transition,\n        border: '1px solid #ccc',\n        margin: '10px 0',\n        background: '#f1f1f1',\n    };\n    return (\n        <p ref={setNodeRef} style={style} {...attributes} {...listeners} id={id}>\n            Item {id}- ${title}\n        </p>\n    );\n}\n\ntype ComponentType = {\n    fe_id: string;\n    title: string;\n};\n\nfunction DndSortable() {\n    const [items, setItems] = useState<ComponentType[]>([\n        { fe_id: 'c1', title: '组件1' },\n        { fe_id: 'c2', title: '组件2' },\n        { fe_id: 'c3', title: '组件3' },\n    ]);\n\n    const sensors = useSensors(\n        useSensor(PointerSensor),\n        useSensor(KeyboardSensor, {\n            coordinateGetter: sortableKeyboardCoordinates,\n        }),\n    );\n\n    function handleDragEnd(event: DragEndEvent) {\n        const { active, over } = event;\n        if (!over) return;\n\n        if (active.id !== over.id) {\n            setItems(items => {\n                const oldIndex = items.findIndex(c => c.fe_id === active.id);\n                const newIndex = items.findIndex(c => c.fe_id === over.id);\n\n                return arrayMove(items, oldIndex, newIndex);\n            });\n        }\n    }\n\n    return (\n        <DndContext sensors={sensors} collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\n            <SortableContext items={items.map(c => ({ ...c, id: c.fe_id }))} strategy={verticalListSortingStrategy}>\n                {items.map(c => (\n                    <Item key={c.fe_id} id={c.fe_id} {...c} />\n                ))}\n            </SortableContext>\n        </DndContext>\n    );\n}\n\nexport default DndSortable;\n"],"names":["Item","_ref","id","title","_useSortable","useSortable","attributes","listeners","setNodeRef","transform","transition","style","CSS","Transform","toString","border","margin","background","_jsxs","_objectSpread","ref","children","_useState","useState","fe_id","_useState2","_slicedToArray","items","setItems","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","_jsx","DndContext","collisionDetection","closestCenter","onDragEnd","event","active","over","oldIndex","findIndex","c","newIndex","arrayMove","SortableContext","map","strategy","verticalListSortingStrategy"],"sourceRoot":""}