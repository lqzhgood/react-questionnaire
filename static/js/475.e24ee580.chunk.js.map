{"version":3,"file":"static/js/475.e24ee580.chunk.js","mappings":"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","sources":["demos/pages/Base/TaskProvider/TasksContext.tsx","demos/pages/Base/TaskProvider/AddTask.tsx","demos/pages/Base/TaskProvider/TaskList.tsx","demos/pages/Base/TaskProvider/App.tsx"],"sourcesContent":["import React, { useContext, createContext, useReducer } from 'react';\nimport { action, task } from './types';\n\nconst initialTasks = [\n    { id: 0, text: 'Philosopherâ€™s Path', done: true },\n    { id: 1, text: 'Visit the temple', done: false },\n    { id: 2, text: 'Drink matcha', done: false },\n];\n\nconst TasksContext = createContext<task[]>([]);\nconst TasksDispatchContext = createContext<React.Dispatch<action> | null>(null);\n\ntype PropsType = {\n    children: JSX.Element | JSX.Element[];\n};\n\nexport const TasksProvider = ({ children }: PropsType) => {\n    const [task, dispatch] = useReducer(tasksReducer, initialTasks);\n\n    return (\n        <TasksContext.Provider value={task}>\n            <TasksDispatchContext.Provider value={dispatch}>{children}</TasksDispatchContext.Provider>\n        </TasksContext.Provider>\n    );\n};\n\nfunction tasksReducer(tasks: task[], action: action) {\n    switch (action.type) {\n        case 'added': {\n            return [\n                ...tasks,\n                {\n                    id: action.id,\n                    text: action.text,\n                    done: false,\n                },\n            ];\n        }\n        case 'changed': {\n            return tasks.map(t => {\n                if (t.id === action.task.id) {\n                    return action.task;\n                } else {\n                    return t;\n                }\n            });\n        }\n        case 'deleted': {\n            return tasks.filter(t => t.id !== action.id);\n        }\n        default: {\n            throw Error('Unknown action: ' + action.type);\n        }\n    }\n}\n\nexport function useTasks() {\n    return useContext(TasksContext);\n}\n\nexport function useTasksDispatch() {\n    return useContext(TasksDispatchContext);\n}\n","import React, { useState } from 'react';\n\nimport { useTasksDispatch } from './TasksContext';\n\nconst AddTask = () => {\n    const [text, setText] = useState('');\n\n    const dispatch = useTasksDispatch();\n\n    return (\n        <div>\n            <input type='text' value={text} onChange={e => setText(e.target.value)} />\n            <button\n                disabled={!text.trim()}\n                onClick={() => {\n                    if (!text.trim()) return;\n                    setText('');\n                    dispatch?.({\n                        type: 'added',\n                        id: Date.now(),\n                        text: text,\n                    });\n                }}\n            >\n                Add\n            </button>\n        </div>\n    );\n};\n\nexport default AddTask;\n","import React, { useState } from 'react';\n\nimport { useTasks, useTasksDispatch } from './TasksContext';\nimport { task } from './types';\n\nconst TaskList = () => {\n    const tasks = useTasks();\n    return (\n        <ul>\n            {tasks.map(v => (\n                <li key={v.id}>\n                    <Task task={v} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n\ntype TaskProp = {\n    task: task;\n};\n\nfunction Task({ task }: TaskProp) {\n    const [isEditing, setIsEditing] = useState(false);\n    const dispatch = useTasksDispatch();\n    let taskContent;\n    if (isEditing) {\n        taskContent = (\n            <>\n                <input\n                    value={task.text}\n                    onChange={e => {\n                        dispatch?.({\n                            type: 'changed',\n                            task: {\n                                ...task,\n                                text: e.target.value,\n                            },\n                        });\n                    }}\n                />\n                <button onClick={() => setIsEditing(false)}>Save</button>\n            </>\n        );\n    } else {\n        taskContent = (\n            <>\n                {task.text}\n                <button onClick={() => setIsEditing(true)}>Edit</button>\n            </>\n        );\n    }\n    return (\n        <label>\n            <input\n                type='checkbox'\n                checked={task.done}\n                onChange={e => {\n                    dispatch?.({\n                        type: 'changed',\n                        task: {\n                            ...task,\n                            done: e.target.checked,\n                        },\n                    });\n                }}\n            />\n            {taskContent}\n            <button\n                onClick={() => {\n                    dispatch?.({\n                        type: 'deleted',\n                        id: task.id,\n                    });\n                }}\n            >\n                Delete\n            </button>\n        </label>\n    );\n}\n\nexport default TaskList;\n","import React from 'react';\n\nimport { TasksProvider } from './TasksContext';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\n\nconst App = () => {\n    return (\n        <TasksProvider>\n            <h1>ToDo List</h1>\n            <AddTask />\n            <TaskList />\n        </TasksProvider>\n    );\n};\n\nexport default App;\n"],"names":["initialTasks","id","text","done","TasksContext","createContext","TasksDispatchContext","TasksProvider","_ref","children","_useReducer","useReducer","tasksReducer","_useReducer2","_slicedToArray","task","dispatch","_jsx","Provider","value","tasks","action","type","concat","_toConsumableArray","map","t","filter","Error","useTasksDispatch","useContext","_useState","useState","_useState2","setText","_jsxs","onChange","e","target","disabled","trim","onClick","Date","now","Task","taskContent","isEditing","setIsEditing","_Fragment","_objectSpread","checked","v","AddTask","TaskList"],"sourceRoot":""}