{"version":3,"file":"static/js/Stat.413d0681.chunk.js","mappings":"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","sources":["components/CenterSpin.tsx","webpack://react-questionnaire/./src/pages/question/Stat/index.module.sass?3cda","webpack://react-questionnaire/./src/pages/question/Stat/components/Top/StatHeader.module.sass?3276","pages/question/Stat/components/Top/StatHeader.tsx","webpack://react-questionnaire/./src/pages/question/Stat/components/Left/ComponentList.module.sass?5ab0","pages/question/Stat/components/Left/ComponentList.tsx","webpack://react-questionnaire/./src/pages/question/Stat/components/Main/PageSata.module.sass?639d","pages/question/Stat/components/Main/PageSata.tsx","services/stat.ts","pages/question/Stat/components/Right/ChartStat.tsx","pages/question/Stat/index.tsx"],"sourcesContent":["import { Spin } from 'antd';\nimport React from 'react';\n\nfunction CenterSpin({ style = {} }: { style?: React.CSSProperties }) {\n    return (\n        <div style={{ textAlign: 'center', ...style }}>\n            <Spin />\n        </div>\n    );\n}\n\nexport default CenterSpin;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Stat_container__Fm1Q9\",\"content-wrapper\":\"Stat_content-wrapper__IdJfg\",\"content\":\"Stat_content__3LPHZ\",\"left\":\"Stat_left__wNrSL\",\"main\":\"Stat_main__63lJK\",\"right\":\"Stat_right__ujpG3\"};","// extracted by mini-css-extract-plugin\nexport default {\"header-wrapper\":\"StatHeader_header-wrapper__p6wBK\",\"header\":\"StatHeader_header__HQBV1\",\"left\":\"StatHeader_left__3fGeI\",\"main\":\"StatHeader_main__ceNek\",\"right\":\"StatHeader_right__LmibG\"};","import React, { useMemo, useRef } from 'react';\n\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { Button, Input, InputRef, Popover, Space, Tooltip, Typography, message } from 'antd';\nimport { CopyOutlined, LeftOutlined, QrcodeOutlined } from '@ant-design/icons';\n\nimport QRCode from 'qrcode.react';\nimport useGetQuestionPageInfo from '@/hooks/useGetQuestionPageInfo';\nimport styles from './StatHeader.module.sass';\n\nconst { Title } = Typography;\n\nconst StatHeader = () => {\n    const nav = useNavigate();\n    const { id } = useParams();\n    const { title, isPublished } = useGetQuestionPageInfo();\n\n    const urlInputRef = useRef<InputRef>(null);\n\n    function copy() {\n        const elm = urlInputRef.current;\n        if (!elm) return null;\n        elm.select();\n        const text = elm.input?.value || '';\n        navigator.clipboard.writeText(text);\n        message.success(`复制成功 ${text}`);\n    }\n\n    const LinkAndQRCodeElm = useMemo(() => {\n        if (!isPublished) return null;\n\n        const url = window.location.origin + `/question/${id}`;\n\n        return (\n            <Space>\n                <Input style={{ width: '300px' }} value={url} ref={urlInputRef} />\n                <Tooltip title='复制链接'>\n                    <Button icon={<CopyOutlined />} onClick={copy} />\n                </Tooltip>\n                <Popover content={<QRCode value={url} size={150} />}>\n                    <Button icon={<QrcodeOutlined />}></Button>\n                </Popover>\n            </Space>\n        );\n    }, [id, isPublished]);\n\n    return (\n        <div className={styles['header-wrapper']}>\n            <div className={styles.header}>\n                <div className={styles.left}>\n                    <Space>\n                        <Button type='link' icon={<LeftOutlined />} onClick={() => nav(-1)}>\n                            返回\n                        </Button>\n                        <Title>{title}</Title>\n                    </Space>\n                </div>\n                <div className={styles.main}>{LinkAndQRCodeElm}</div>\n                <div className={styles.right}>\n                    <Button type='primary' onClick={() => nav(`/question/edit/${id}`)}>\n                        编辑问卷\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default StatHeader;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ComponentList_container__zUunq\",\"component-wrapper\":\"ComponentList_component-wrapper__a+x6c\",\"selected\":\"ComponentList_selected__EBWpQ\",\"component\":\"ComponentList_component__bLQb+\"};","import React from 'react';\nimport styles from './ComponentList.module.sass';\nimport useGetComponentInfo from '@/hooks/useGetComponentInfo';\nimport classnames from 'classnames';\nimport { componentConfList } from '@/components/QuestionComponents';\nimport { QuestionComponentType } from '@/const/question';\n\ntype PropsType = {\n    selectedComponentId: string;\n    setSelectedComponentId: (id: string) => void;\n    setSelectedComponentType: (type: QuestionComponentType) => void;\n};\n\nconst ComponentList = ({ selectedComponentId, setSelectedComponentId, setSelectedComponentType }: PropsType) => {\n    const { componentList } = useGetComponentInfo();\n\n    return (\n        <div className={styles.container}>\n            {componentList\n                .filter(c => !c.isHidden)\n                .map(({ fe_id, props, type }) => {\n                    const componentConf = componentConfList[type];\n                    const { Component } = componentConf;\n\n                    const wrapClass = classnames(styles['component-wrapper'], {\n                        [styles.selected]: fe_id === selectedComponentId,\n                    });\n\n                    return (\n                        <div\n                            key={fe_id}\n                            className={wrapClass}\n                            onClick={() => {\n                                setSelectedComponentId(fe_id);\n                                setSelectedComponentType(type);\n                            }}\n                        >\n                            <div className={styles.component}>\n                                <Component {...props} />\n                            </div>\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nexport default ComponentList;\n","// extracted by mini-css-extract-plugin\nexport default {\"selected\":\"PageSata_selected__fKitc\"};","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useRequest } from 'ahooks';\nimport { Table, Typography } from 'antd';\n\nimport useGetComponentInfo from '@/hooks/useGetComponentInfo';\nimport CenterSpin from '@/components/CenterSpin';\nimport { GroupType, componentConfGroup } from '@/components/QuestionComponents';\n\nimport { StatDetail, StatListType, getStatListService } from '@/services/stat';\n\nimport { STAT_PAGE_SIZE } from '@/const';\nimport { QuestionComponentType } from '@/const/question';\n\nimport styles from './PageSata.module.sass';\n\nconst { Title } = Typography;\n\ntype Props = {\n    selectedComponentId: string;\n    setSelectedComponentId: (id: string) => void;\n    setSelectedComponentType: (type: QuestionComponentType) => void;\n};\n\nconst ComponentGroupText = componentConfGroup.find(g => g.groupName === GroupType.Text);\n\nconst PageSata = (props: Props) => {\n    const { selectedComponentId, setSelectedComponentId, setSelectedComponentType } = props;\n\n    const { id = '' } = useParams();\n    const { componentList } = useGetComponentInfo();\n\n    const [page, setPage] = useState(1);\n    const [pageSize, setPageSize] = useState(STAT_PAGE_SIZE);\n    const [total, setTotal] = useState(0);\n    const [list, setList] = useState<StatDetail[]>([]);\n\n    const { loading } = useRequest<StatListType, [string, { page: number; pageSize: number }]>(\n        () =>\n            getStatListService(id, {\n                page,\n                pageSize,\n            }),\n        {\n            refreshDeps: [id, page, pageSize],\n            onSuccess(data) {\n                setTotal(data.total);\n                setList(data.list);\n            },\n        },\n    );\n\n    const columns = componentList\n        .filter(({ type }) => {\n            return ComponentGroupText ? !ComponentGroupText.components.some(cc => cc.type === type) : true;\n        })\n        .map(c => {\n            const { fe_id, type } = c;\n            const title = (\n                <div\n                    style={{ cursor: 'pointer' }}\n                    className={selectedComponentId === fe_id ? styles.selected : ''}\n                    onClick={() => {\n                        setSelectedComponentId(fe_id);\n                        setSelectedComponentType(type);\n                    }}\n                >\n                    {c.title}\n                </div>\n            );\n\n            return {\n                title,\n                dataIndex: fe_id,\n            };\n        });\n\n    return (\n        <div>\n            <Title level={3}>答卷数量: {total}</Title>\n            {loading ? (\n                <CenterSpin />\n            ) : (\n                <Table\n                    rowKey='_id'\n                    dataSource={list}\n                    columns={columns}\n                    pagination={{\n                        total,\n                        current: page,\n                        pageSize,\n                        onChange(page) {\n                            setPage(page);\n                        },\n                        onShowSizeChange(page, pageSize) {\n                            setPage(page);\n                            setPageSize(pageSize);\n                        },\n                    }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default PageSata;\n","import axios from './net';\n\nexport type StatDetail = {\n    _id: string;\n    [key: string]: string;\n};\n\nexport type StatListType = {\n    total: number;\n    list: StatDetail[];\n};\n\nexport function getStatListService<T = StatListType>(questionId: string, opt: { page: number; pageSize: number }) {\n    const url = `/api/stat/${questionId}`;\n    return axios.get<T, T>(url, { params: opt });\n}\n\nexport type StatComponentDetail = { name: string; count: number };\n\nexport type StatComponentType = {\n    stat: StatComponentDetail[];\n};\n\nexport function getStatComponentService<T = StatComponentType>(questionId: string, componentId: string) {\n    const url = `/api/stat/${questionId}/${componentId}`;\n    return axios.get<T, T>(url);\n}\n","import React, { useEffect, useState } from 'react';\nimport { useRequest } from 'ahooks';\nimport { Empty, Typography } from 'antd';\nimport { useParams } from 'react-router-dom';\n\nimport { StatComponentDetail, StatComponentType, getStatComponentService } from '@/services/stat';\nimport { componentConfList } from '@/components/QuestionComponents';\nimport { QuestionComponentType } from '@/const/question';\nimport CenterSpin from '@/components/CenterSpin';\n\ntype Props = {\n    selectedComponentId: string;\n    selectedComponentType: QuestionComponentType | undefined;\n};\n\nconst { Title } = Typography;\n\nconst ChartStat = (props: Props) => {\n    const { id: questionId = '' } = useParams();\n    const { selectedComponentId, selectedComponentType } = props;\n\n    const [stat, setStat] = useState<StatComponentDetail[]>([]);\n\n    const { loading, run } = useRequest<StatComponentType, [questionId: string, selectedComponentId: string]>(\n        (questionId, selectedComponentId) => getStatComponentService(questionId, selectedComponentId),\n        {\n            manual: true,\n            onSuccess(data) {\n                setStat(data.stat);\n            },\n        },\n    );\n\n    useEffect(() => {\n        if (selectedComponentId) run(questionId, selectedComponentId);\n    }, [questionId, selectedComponentId]);\n\n    const ChartElm = () => {\n        if (!selectedComponentId || !selectedComponentType) {\n            return <Empty description='未选中组件' />;\n        }\n\n        const StatChart = componentConfList[selectedComponentType].StatChart;\n\n        if (!StatChart) {\n            return <Empty description='当前组件没有统计图表' />;\n        }\n\n        return loading ? <CenterSpin /> : <StatChart data={stat} />;\n    };\n\n    return (\n        <div>\n            <Title level={3}>图表统计</Title>\n            <div>{ChartElm()}</div>\n        </div>\n    );\n};\n\nexport default ChartStat;\n","import React, { useState } from 'react';\nimport { useTitle } from 'ahooks';\nimport { Button, Result } from 'antd';\nimport { useNavigate } from 'react-router-dom';\n\nimport CenterSpin from '@/components/CenterSpin';\nimport useGetQuestionPageInfo from '@/hooks/useGetQuestionPageInfo';\nimport useLoadQuestionData from '@/hooks/useLoadQuestionData';\n\nimport styles from './index.module.sass';\nimport StatHeader from './components/Top/StatHeader';\nimport ComponentList from './components/Left/ComponentList';\nimport PageSata from './components/Main/PageSata';\nimport ChartStat from './components/Right/ChartStat';\nimport { QuestionComponentType } from '@/const/question';\n\nconst Stat = () => {\n    const nav = useNavigate();\n    const { loading } = useLoadQuestionData();\n    const { isPublished, title } = useGetQuestionPageInfo();\n    useTitle(title + '- 问卷统计', { restoreOnUnmount: true });\n\n    const [selectedComponentId, setSelectedComponentId] = useState('');\n    const [selectedComponentType, setSelectedComponentType] = useState<QuestionComponentType>();\n\n    const LoadingElm = <CenterSpin style={{ marginTop: '60px' }} />;\n\n    const PublishedElm = (\n        <div style={{ flex: '1' }}>\n            <Result\n                status='warning'\n                title='问卷未发布'\n                extra={\n                    <Button type='primary' onClick={() => nav(-1)}>\n                        返回\n                    </Button>\n                }\n            />\n        </div>\n    );\n\n    function ContentElm() {\n        if (isPublished !== undefined && !isPublished) return PublishedElm;\n\n        return (\n            <>\n                <div className={styles.left}>\n                    <ComponentList\n                        selectedComponentId={selectedComponentId}\n                        setSelectedComponentId={setSelectedComponentId}\n                        setSelectedComponentType={setSelectedComponentType}\n                    />\n                </div>\n                <div className={styles.main}>\n                    <PageSata\n                        selectedComponentId={selectedComponentId}\n                        setSelectedComponentId={setSelectedComponentId}\n                        setSelectedComponentType={setSelectedComponentType}\n                    />\n                </div>\n                <div className={styles.right}>\n                    <ChartStat\n                        selectedComponentId={selectedComponentId}\n                        selectedComponentType={selectedComponentType}\n                    />\n                </div>\n            </>\n        );\n    }\n\n    // TODO 函数和组件的区别\n    return (\n        <div className={styles.container}>\n            <div>\n                <StatHeader />\n            </div>\n            <div className={styles['content-wrapper']}>\n                {loading ? LoadingElm : <div className={styles.content}>{ContentElm()}</div>}\n            </div>\n        </div>\n    );\n};\nexport default Stat;\n"],"names":["_ref","_ref$style","style","_jsx","_objectSpread","textAlign","children","Spin","Title","Typography","nav","useNavigate","id","useParams","_useGetQuestionPageIn","useGetQuestionPageInfo","title","isPublished","urlInputRef","useRef","copy","_elm$input","elm","current","select","text","input","value","navigator","clipboard","writeText","message","success","concat","LinkAndQRCodeElm","useMemo","url","window","location","origin","_jsxs","Space","Input","width","ref","Tooltip","Button","icon","CopyOutlined","onClick","Popover","content","QRCode","size","QrcodeOutlined","className","styles","type","LeftOutlined","selectedComponentId","setSelectedComponentId","setSelectedComponentType","componentList","useGetComponentInfo","filter","c","isHidden","map","_ref2","fe_id","props","Component","componentConfList","wrapClass","classnames","_defineProperty","ComponentGroupText","componentConfGroup","find","g","groupName","GroupType","Text","_useParams$id","_useState","useState","_useState2","_slicedToArray","page","setPage","_useState3","STAT_PAGE_SIZE","_useState4","pageSize","setPageSize","_useState5","_useState6","total","setTotal","_useState7","_useState8","list","setList","loading","useRequest","questionId","opt","axios","get","params","getStatListService","refreshDeps","onSuccess","data","columns","components","some","cc","cursor","dataIndex","level","CenterSpin","Table","rowKey","dataSource","pagination","onChange","onShowSizeChange","selectedComponentType","stat","setStat","_useRequest","componentId","getStatComponentService","manual","run","useEffect","Empty","description","StatChart","ChartElm","useLoadQuestionData","useTitle","restoreOnUnmount","LoadingElm","marginTop","PublishedElm","flex","Result","status","extra","StatHeader","undefined","_Fragment","ComponentList","PageSata","ChartStat"],"sourceRoot":""}