{"version":3,"file":"static/js/617.39ba4aa9.chunk.js","mappings":"wOAUA,GAAeA,EAAAA,EAAAA,IAAe,CAC1BC,QAAS,CAELC,MAAOC,EAAAA,GAAWF,QAClBG,SAAUC,EAAAA,GAAcJ,W,uDCsChC,EA7CiB,WACb,IAAMG,GAAWE,EAAAA,EAAAA,KAAuC,SAAAC,GAAK,OAAIA,EAAMH,QAAQ,IAEzEI,GAAWC,EAAAA,EAAAA,MAEjBC,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAEpB,OACII,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACHd,EAASgB,KAAI,SAAAC,GACV,IAAQC,EAAyBD,EAAzBC,GAAIC,EAAqBF,EAArBE,MAAOC,EAAcH,EAAdG,UAEnB,OACIL,EAAAA,EAAAA,KAAA,MAAAD,UACIF,EAAAA,EAAAA,MAACS,EAAAA,EAAK,CAAAP,SAAA,EACFC,EAAAA,EAAAA,KAAA,SACIO,KAAK,WACLC,QAASH,EACTI,SAAU,kBAAMpB,GAASqB,EAAAA,EAAAA,IAAO,CAAEP,GAAAA,EAAIE,WAAYA,IAAa,KAEnEL,EAAAA,EAAAA,KAAA,QAAMW,MAAON,EAAY,CAAEO,eAAgB,eAAgBC,QAAS,IAAQ,CAAC,EAAEd,SAC1EK,KAELJ,EAAAA,EAAAA,KAAA,UAAQc,QAAS,kBAAMzB,GAAS0B,EAAAA,EAAAA,IAAIb,GAAM,EAACH,SAAC,UAV3CI,EAcjB,KACAH,EAAAA,EAAAA,KAAA,SACIO,KAAK,OACLS,MAAOrB,EACPsB,YAAY,oBACZR,SAAU,SAAAS,GAAC,OAAItB,EAAQsB,EAAEC,OAAOH,MAAM,EACtCI,UAAW,SAAAF,GACO,UAAVA,EAAEG,KACD1B,EAAK2B,SACVjC,GAASkC,EAAAA,EAAAA,IAAI,CAAEpB,IAAIqB,EAAAA,EAAAA,IAAO,GAAIpB,MAAOT,EAAMU,WAAW,KACtDT,EAAQ,IACZ,MAIhB,EClCA,EAVc,WACV,OACIC,EAAAA,EAAAA,MAAC4B,EAAAA,GAAQ,CAACC,MAAOA,EAAM3B,SAAA,EACnBC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAK,KACN3B,EAAAA,EAAAA,KAAA,MAAIW,MAAO,CAAEiB,OAAQ,aACrB5B,EAAAA,EAAAA,KAAC6B,EAAQ,MAGrB,C,iFCSA,IAjBc,WACV,IAAM9C,GAAQI,EAAAA,EAAAA,KAA+B,SAAAC,GAAK,OAAIA,EAAML,KAAK,IAE3DM,GAAWC,EAAAA,EAAAA,MAEjB,OACIO,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJF,EAAAA,EAAAA,MAACS,EAAAA,EAAK,CAAAP,SAAA,EACFC,EAAAA,EAAAA,KAAA,QAAAD,SAAOhB,KACPiB,EAAAA,EAAAA,KAAA,UAAQc,QAAS,kBAAMzB,GAASyC,EAAAA,EAAAA,MAAW,EAAC/B,SAAC,OAC7CC,EAAAA,EAAAA,KAAA,UAAQc,QAAS,kBAAMzB,GAAS0C,EAAAA,EAAAA,MAAW,EAAChC,SAAC,WAI7D,C,6GCjBaf,GAAagD,E,SAAAA,IAAY,CAClCC,KAAM,QACNC,aAJe,IAKfC,SAAU,CACNL,SAAQ,SAAC1C,GACL,OAAOA,EAAQ,CACnB,EACA2C,SAAQ,SAAC3C,GACL,OAAOA,EAAQ,CACnB,KAIDgD,EAA+BpD,EAAWqD,QAAlCP,EAAQM,EAARN,SAAUC,EAAQK,EAARL,Q,2JCRnBO,EAA6B,CAC/B,CAAEnC,IAAIqB,EAAAA,EAAAA,IAAO,GAAIpB,MAAO,eAAMC,WAAW,GACzC,CAAEF,IAAIqB,EAAAA,EAAAA,IAAO,GAAIpB,MAAO,eAAMC,WAAW,IAGhCnB,GAAgB8C,EAAAA,EAAAA,IAAY,CACrCC,KAAM,WACNC,aAAcI,EACdH,SAAU,CACNZ,IAAG,SAACnC,EAAuBmD,GACvBnD,EAAMoD,KAAKD,EAAOE,QACtB,EACA1B,IAAG,SAAC3B,EAAuBmD,GACvB,OAAOnD,EAAMsD,QAAO,SAAAC,GAAC,OAAIA,EAAExC,KAAOoC,EAAOE,QAAQtC,EAAE,GACvD,EACAO,OAAM,SAACtB,EAAuBmD,GAC1B,IAAMK,EAAIxD,EAAMyD,MAAK,SAAAF,GAAC,OAAIA,EAAExC,KAAOoC,EAAOE,QAAQtC,EAAE,IAChDyC,GAAGE,OAAOC,OAAOH,EAAGL,EAAOE,QACnC,KAIDO,EAA6B9D,EAAcmD,QAAnCd,EAAGyB,EAAHzB,IAAKR,EAAGiC,EAAHjC,IAAKL,EAAMsC,EAANtC,M","sources":["demos/pages/Lib/Redux/store/index.ts","demos/pages/Lib/Redux/pages/TodoList.tsx","demos/pages/Lib/Redux/index.tsx","demos/pages/Lib/Redux/pages/Count.tsx","demos/pages/Lib/Redux/store/count.ts","demos/pages/Lib/Redux/store/todoList.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\n\nimport { countSlice } from './count';\nimport { TodoItemType, todoListSlice } from './todoList';\n\nexport type StateType = {\n    count: number;\n    todoList: TodoItemType[];\n};\n\nexport default configureStore({\n    reducer: {\n        // module\n        count: countSlice.reducer,\n        todoList: todoListSlice.reducer,\n    },\n});\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { StateType } from '../store';\nimport { TodoItemType, add, del, update } from '../store/todoList';\nimport { Space } from 'antd';\nimport { nanoid } from 'nanoid';\n\nconst TodoList = () => {\n    const todoList = useSelector<StateType, TodoItemType[]>(state => state.todoList);\n\n    const dispatch = useDispatch();\n\n    const [text, setText] = useState('');\n\n    return (\n        <>\n            <h2>Todo List</h2>\n            {todoList.map(todo => {\n                const { id, title, completed } = todo;\n\n                return (\n                    <li key={id}>\n                        <Space>\n                            <input\n                                type='checkbox'\n                                checked={completed}\n                                onChange={() => dispatch(update({ id, completed: !completed }))}\n                            />\n                            <span style={completed ? { textDecoration: 'line-through', opacity: 0.5 } : {}}>\n                                {title}\n                            </span>\n                            <button onClick={() => dispatch(del(todo))}>x</button>\n                        </Space>\n                    </li>\n                );\n            })}\n            <input\n                type='text'\n                value={text}\n                placeholder='enter to add todo'\n                onChange={e => setText(e.target.value)}\n                onKeyDown={e => {\n                    if (e.key !== 'Enter') return;\n                    if (!text.trim()) return;\n                    dispatch(add({ id: nanoid(5), title: text, completed: false }));\n                    setText('');\n                }}\n            />\n        </>\n    );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store/index';\nimport Count from './pages/Count';\nimport TodoList from './pages/TodoList';\n\nconst Redux = () => {\n    return (\n        <Provider store={store}>\n            <Count />\n            <hr style={{ margin: '20px 0' }} />\n            <TodoList />\n        </Provider>\n    );\n};\n\nexport default Redux;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { decrease, increase } from '../store/count';\nimport { StateType } from '../store';\nimport { Space } from 'antd';\n\nconst Count = () => {\n    const count = useSelector<StateType, number>(state => state.count);\n\n    const dispatch = useDispatch();\n\n    return (\n        <div>\n            <h2>Count</h2>\n            <Space>\n                <span>{count}</span>\n                <button onClick={() => dispatch(increase())}>+</button>\n                <button onClick={() => dispatch(decrease())}>-</button>\n            </Space>\n        </div>\n    );\n};\n\nexport default Count;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst INIT_STATE = 100;\n\nexport const countSlice = createSlice({\n    name: 'count', // module name\n    initialState: INIT_STATE,\n    reducers: {\n        increase(state: number) {\n            return state + 1;\n        },\n        decrease(state: number) {\n            return state - 1;\n        },\n    },\n});\n\nexport const { increase, decrease } = countSlice.actions;\n","import { PayloadAction, createSlice } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\n\nexport type TodoItemType = {\n    id: string;\n    title: string;\n    completed: boolean;\n};\n\nconst INIT_STATE: TodoItemType[] = [\n    { id: nanoid(5), title: '吃饭', completed: false },\n    { id: nanoid(5), title: '睡觉', completed: true },\n];\n\nexport const todoListSlice = createSlice({\n    name: 'todoList',\n    initialState: INIT_STATE,\n    reducers: {\n        add(state: TodoItemType[], action: PayloadAction<TodoItemType>) {\n            state.push(action.payload);\n        },\n        del(state: TodoItemType[], action: PayloadAction<TodoItemType>) {\n            return state.filter(v => v.id !== action.payload.id);\n        },\n        update(state: TodoItemType[], action: PayloadAction<{ id: string } & Partial<Omit<TodoItemType, 'id'>>>) {\n            const f = state.find(v => v.id === action.payload.id);\n            if (f) Object.assign(f, action.payload);\n        },\n    },\n});\n\nexport const { add, del, update } = todoListSlice.actions;\n"],"names":["configureStore","reducer","count","countSlice","todoList","todoListSlice","useSelector","state","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","text","setText","_jsxs","_Fragment","children","_jsx","map","todo","id","title","completed","Space","type","checked","onChange","update","style","textDecoration","opacity","onClick","del","value","placeholder","e","target","onKeyDown","key","trim","add","nanoid","Provider","store","Count","margin","TodoList","increase","decrease","createSlice","name","initialState","reducers","_countSlice$actions","actions","INIT_STATE","action","push","payload","filter","v","f","find","Object","assign","_todoListSlice$action"],"sourceRoot":""}