{"version":3,"file":"static/js/510.6277183a.chunk.js","mappings":"oQAOaA,EAAoD,CAC7DC,MAAO,iCACPC,YAAa,sB,iCCLTC,EAAcC,EAAAA,EAAdD,UAcR,EAZsB,SAACE,GACnB,IAAAC,GAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAoCP,GAA8BK,GAA1DJ,EAAKK,EAALL,MAAOC,EAAWI,EAAXJ,YACf,OACIM,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACP,EAAS,CAACQ,QAAM,EAAAF,SAAER,KACnBS,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,CAACV,YAAaA,QAIpC,E,qBCmBA,EA7BkB,SAACG,GACf,IAAQJ,EAA2CI,EAA3CJ,MAAOC,EAAoCG,EAApCH,YAAaW,EAAuBR,EAAvBQ,SAAUC,EAAaT,EAAbS,SAEtCC,EAAeC,EAAAA,EAAKC,UAAbC,GAA8CC,EAAAA,EAAAA,GAAAJ,EAAA,GAA1C,GAMX,OAJAK,EAAAA,EAAAA,YAAU,WACNF,EAAKG,eAAe,CAAEpB,MAAAA,EAAOC,YAAAA,GACjC,GAAG,CAACD,EAAOC,KAGPM,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACDF,SAAUA,EACVQ,OAAO,WACPC,cAAe,CAAEtB,MAAAA,EAAOC,YAAAA,GACxBsB,eAAgB,SAACC,EAAGC,GAChBb,GAAYA,EAASa,EACzB,EACAR,KAAMA,EAAKT,SAAA,EAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,eAAKC,KAAK,QAAQC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UAC7EC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,OAEVF,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,iCAAQC,KAAK,cAAcC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UACtFC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,QAItB,EC1BA,GACIX,MAAO,qBACPgC,KAAMC,EAAAA,EAAsBtB,MAC5BuB,UAAAA,EACAC,UAAAA,EACAC,UAAW,KACXC,aAActC,GCNLuC,EAA0D,CACnEtC,MAAO,6CACPC,YAAa,sBCLTC,EAAcC,EAAAA,EAAdD,UAcR,EAZyB,SAACE,GACtB,IAAAmC,GAAAjC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAoCgC,GAAiClC,GAA7DJ,EAAKuC,EAALvC,MAAOC,EAAWsC,EAAXtC,YACf,OACIM,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACP,EAAS,CAACQ,QAAM,EAAAF,SAAER,KACnBS,EAAAA,EAAAA,KAAA,OAAAD,UACIC,EAAAA,EAAAA,KAACE,EAAAA,EAAM6B,SAAQ,CAACvC,YAAaA,QAI7C,ECmBA,EA7BkB,SAACG,GACf,IAAQJ,EAA2CI,EAA3CJ,MAAOC,EAAoCG,EAApCH,YAAaW,EAAuBR,EAAvBQ,SAAUC,EAAaT,EAAbS,SAEtCC,EAAeC,EAAAA,EAAKC,UAAbC,GAAiDC,EAAAA,EAAAA,GAAAJ,EAAA,GAA7C,GAMX,OAJAK,EAAAA,EAAAA,YAAU,WACNF,EAAKG,eAAe,CAAEpB,MAAAA,EAAOC,YAAAA,GACjC,GAAG,CAACD,EAAOC,KAGPM,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACDF,SAAUA,EACVQ,OAAO,WACPC,cAAe,CAAEtB,MAAAA,EAAOC,YAAAA,GACxBsB,eAAgB,SAACC,EAAGC,GAChBb,GAAYA,EAASa,EACzB,EACAR,KAAMA,EAAKT,SAAA,EAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,eAAKC,KAAK,QAAQC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UAC7EC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,OAEVF,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,iCAAQC,KAAK,cAAcC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UACtFC,EAAAA,EAAAA,KAACE,EAAAA,EAAM6B,SAAQ,QAI/B,EC1BA,GACIxC,MAAO,qBACPgC,KAAMC,EAAAA,EAAsBQ,SAC5BP,UAAAA,EACAC,UAAAA,EACAC,UAAW,KACXC,aAAcC,GCLLI,EAAoD,CAC7DC,KAAM,2BACNC,MAAO,EACPC,UAAU,GCPNC,EAAU3C,EAAAA,EAAV2C,MA6BR,EA3BsB,SAAC1C,GACnB,IAAA2C,GAAAzC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAA2CoC,GAA8BtC,GAAjEuC,EAAII,EAAJJ,KAAIK,EAAAD,EAAEH,MAAAA,OAAK,IAAAI,EAAG,EAACA,EAAEH,EAAQE,EAARF,SAgBzB,OACIpC,EAAAA,EAAAA,KAACqC,EAAK,CACFF,MAAOA,EACPK,MAAO,CAAEC,UAAWL,EAAW,SAAW,QAASM,aAAc,EAAGC,SAjBxD,SAACR,GACjB,OAAQA,GACJ,KAAK,EACD,MAAO,OACX,KAAK,EACD,MAAO,OAIX,QACI,MAAO,OAEnB,CAKsFS,CAAYT,IAASpC,SAElGmC,GAGb,E,sBCaA,EAtCkB,SAACvC,GACf,IAAQuC,EAA8CvC,EAA9CuC,KAAMC,EAAwCxC,EAAxCwC,MAAOC,EAAiCzC,EAAjCyC,SAAUjC,EAAuBR,EAAvBQ,SAAUC,EAAaT,EAAbS,SAEzCC,EAAeC,EAAAA,EAAKC,UAAbC,GAA8CC,EAAAA,EAAAA,GAAAJ,EAAA,GAA1C,GAMX,OAJAK,EAAAA,EAAAA,YAAU,WACNF,EAAKG,eAAe,CAAEuB,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,GACvC,GAAG,CAACF,EAAMC,EAAOC,KAGbtC,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACDF,SAAUA,EACVQ,OAAO,WACPC,cAAe,CAAEqB,KAAAA,EAAMC,MAAAA,EAAOC,SAAAA,GAC9BtB,eAAgB,SAACC,EAAGC,GAChBb,GAAYA,EAASa,EACzB,EACAR,KAAMA,EAAKT,SAAA,EAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,eAAKC,KAAK,OAAOC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UAC5EC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,OAEVF,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,eAAKC,KAAK,QAAQC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UAC7EC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CACHC,QAAS,CACL,CAAEC,MAAO,EAAGb,KAAM,GAClB,CAAEa,MAAO,EAAGb,KAAM,GAClB,CAAEa,MAAO,EAAGb,KAAM,SAI9BlC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACE,KAAK,WAAW6B,cAAc,UAASjD,UAC9CC,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAAAlD,SAAC,iCAI1B,ECnCA,GACIR,MAAO,eACPgC,KAAMC,EAAAA,EAAsBa,MAC5BZ,UAAAA,EACAC,UAAAA,EACAC,UAAW,KACXC,aAAcK,GCNLiB,EAA4D,CACrEhB,KAAM,2BACNE,UAAU,GCJN3C,EAAcC,EAAAA,EAAdD,UAmBR,EAjB0B,SAACE,GACvB,IAAAwD,GAAAtD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAA6CqD,GAAkCvD,GAAKyD,EAAAD,EAA5EjB,KAAAA,OAAI,IAAAkB,EAAG,GAAEA,EAAAC,EAAAF,EAAEf,SAAAA,OAAQ,IAAAiB,GAAQA,EAE7BC,EAAWpB,EAAKqB,MAAM,MAE5B,OACIvD,EAAAA,EAAAA,KAACP,EAAS,CAAC+C,MAAO,CAAEC,UAAWL,EAAW,SAAW,QAASM,aAAc,OAAQ3C,SAC/EuD,EAASE,KAAI,SAACC,EAAGC,GAAC,OACf5D,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CACK0D,EACAC,IAAMJ,EAASK,OAAS,IAAK3D,EAAAA,EAAAA,KAAA,WAFvB0D,EAGJ,KAIvB,ECcA,EA9BkB,SAAC/D,GACf,IAAQuC,EAAuCvC,EAAvCuC,KAAME,EAAiCzC,EAAjCyC,SAAUjC,EAAuBR,EAAvBQ,SAAUC,EAAaT,EAAbS,SAElCC,EAAeC,EAAAA,EAAKC,UAAbC,GAAkDC,EAAAA,EAAAA,GAAAJ,EAAA,GAA9C,GAMX,OAJAK,EAAAA,EAAAA,YAAU,WACNF,EAAKG,eAAe,CAAEuB,KAAAA,EAAME,SAAAA,GAChC,GAAG,CAACF,EAAME,KAGNtC,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACDF,SAAUA,EACVQ,OAAO,WACPC,cAAe,CAAEqB,KAAAA,EAAME,SAAAA,GACvBtB,eAAgB,SAACC,EAAGC,GAChBb,GAAYA,EAASa,EACzB,EACAR,KAAMA,EAAKT,SAAA,EAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,2BAAOC,KAAK,OAAOC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UAC9EC,EAAAA,EAAAA,KAACE,EAAAA,EAAM6B,SAAQ,OAGnB/B,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACE,KAAK,WAAW6B,cAAc,UAASjD,UAC9CC,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAAAlD,SAAC,iCAI1B,EC3BA,GACIR,MAAO,eACPgC,KAAMC,EAAAA,EAAsB/B,UAC5BgC,UAAAA,EACAC,UAAAA,EACAC,UAAW,KACXC,aAAcsB,GCNLU,EAAkD,CAM3DrE,MAAO,eAKPsE,KAAM,gBCdFxB,EAAqB3C,EAAAA,EAArB2C,MAAO5C,EAAcC,EAAAA,EAAdD,UAuBf,EArBsB,SAACE,GACnB,IAAAmE,GAAAjE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAuC+D,GAA6BjE,GAAKoE,EAAAD,EAAjEvE,MAAAA,OAAK,IAAAwE,EAAG,GAAEA,EAAAC,EAAAF,EAAED,KAEdP,QAFkB,IAAAU,EAAG,GAAEA,GAEPT,MAAM,MAE5B,OACIzD,EAAAA,EAAAA,MAAA,OAAK0C,MAAO,CAAEC,UAAW,UAAW1C,SAAA,EAChCC,EAAAA,EAAAA,KAACqC,EAAK,CAACG,MAAO,CAAEG,SAAU,QAAS5C,SAAER,KACrCO,EAAAA,EAAAA,MAACL,EAAS,CAAAM,SAAA,CACL,IACAuD,EAASE,KAAI,SAACC,EAAGC,GAAC,OACf5D,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CACK0D,EACAC,IAAMJ,EAASK,OAAS,IAAK3D,EAAAA,EAAAA,KAAA,WAFvB0D,EAGJ,SAK3B,ECUA,EA7BkB,SAAC/D,GACf,IAAQJ,EAAoCI,EAApCJ,MAAOsE,EAA6BlE,EAA7BkE,KAAM1D,EAAuBR,EAAvBQ,SAAUC,EAAaT,EAAbS,SAE/BC,EAAeC,EAAAA,EAAKC,UAAbC,GAA6CC,EAAAA,EAAAA,GAAAJ,EAAA,GAAzC,GAMX,OAJAK,EAAAA,EAAAA,YAAU,WACNF,EAAKG,eAAe,CAAEpB,MAAAA,EAAOsE,KAAAA,GACjC,GAAG,CAACtE,EAAOsE,KAGP/D,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACDF,SAAUA,EACVQ,OAAO,WACPC,cAAe,CAAEtB,MAAAA,EAAOsE,KAAAA,GACxB/C,eAAgB,SAACC,EAAGC,GAChBb,GAAYA,EAASa,EACzB,EACAR,KAAMA,EAAKT,SAAA,EAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,eAAKC,KAAK,QAAQC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UAC7EC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,OAEVF,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,eAAKC,KAAK,OAAMpB,UAC7BC,EAAAA,EAAAA,KAACE,EAAAA,EAAM6B,SAAQ,QAI/B,EC1BA,GACIxC,MAAO,qBACPgC,KAAMC,EAAAA,EAAsByC,KAC5BxC,UAAAA,EACAC,UAAAA,EACAC,UAAW,KACXC,aAAcgC,GCDLM,EAAoD,CAC7D3E,MAAO,2BACP4E,YAAY,EACZrB,QAAS,CACL,CAAEC,MAAO,KAAM7B,MAAO,iBACtB,CAAE6B,MAAO,KAAM7B,MAAO,iBACtB,CAAE6B,MAAO,KAAM7B,MAAO,kBAE1B6B,MAAO,I,sBChBHtD,EAAcC,EAAAA,EAAdD,UAqBR,EAnBsB,SAACE,GACnB,IAAAyE,GAAAvE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAA0EqE,GAA8BvE,GAAK0E,EAAAD,EAArG7E,MAAAA,OAAK,IAAA8E,EAAG,GAAEA,EAAAC,EAAAF,EAAED,WAAAA,OAAU,IAAAG,GAAQA,EAAAC,EAAAH,EAAEtB,QAAAA,OAAO,IAAAyB,EAAG,GAAEA,EAAAC,EAAAJ,EAAErB,MAAAA,OAAK,IAAAyB,EAAG,GAAEA,EAEhE,OACI1E,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACP,EAAS,CAACQ,QAAM,EAAAF,SAAER,KACnBS,EAAAA,EAAAA,KAACyE,EAAAA,GAAAA,MAAW,CAAC1B,MAAOA,EAAMhD,UACtBC,EAAAA,EAAAA,KAAC0E,EAAAA,EAAK,CAACC,UAAWR,EAAa,WAAa,aAAapE,SACpD+C,EAAQU,KAAI,SAAAoB,GAAA,IAAG7B,EAAK6B,EAAL7B,MAAO7B,EAAK0D,EAAL1D,MAAK,OACxBlB,EAAAA,EAAAA,KAACyE,EAAAA,GAAK,CAAC1B,MAAOA,EAAMhD,SACfmB,GADqB6B,EAElB,UAMhC,E,2CCiEA,EAhFkB,SAACpD,GACf,IAAQJ,EAA+DI,EAA/DJ,MAAO4E,EAAwDxE,EAAxDwE,WAAUU,EAA8ClF,EAA5CmD,QAAAA,OAAO,IAAA+B,EAAG,GAAEA,EAAE9B,EAA8BpD,EAA9BoD,MAAO5C,EAAuBR,EAAvBQ,SAAUC,EAAaT,EAAbS,SAE1DC,EAAeC,EAAAA,EAAKC,UAAbC,GAA8CC,EAAAA,EAAAA,GAAAJ,EAAA,GAA1C,GAMX,OAJAK,EAAAA,EAAAA,YAAU,WACNF,EAAKG,eAAe,CAAEpB,MAAAA,EAAO4E,WAAAA,EAAYrB,QAAAA,EAASC,MAAAA,GACtD,GAAG,CAACxD,EAAO4E,EAAYrB,EAASC,KAG5BjD,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACDF,SAAUA,EACVQ,OAAO,WACPC,cAAe,CAAEtB,MAAAA,EAAO4E,WAAAA,EAAYrB,QAAAA,EAASC,MAAAA,GAC7CjC,eAAgB,SAACC,EAAGC,GACZb,GACAA,EAASa,EAEjB,EACAR,KAAMA,EAAKT,SAAA,EAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,eAAKC,KAAK,QAAQC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UAC7EC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,OAEVF,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,eAAInB,UACjBC,EAAAA,EAAAA,KAACM,EAAAA,EAAKwE,KAAI,CAAC3D,KAAK,UAASpB,SACpB,SAACgF,EAAMH,GAAA,IAAII,EAAGJ,EAAHI,IAAKC,EAAML,EAANK,OAAM,OACnBnF,EAAAA,EAAAA,MAAAoF,EAAAA,SAAA,CAAAnF,SAAA,CACKgF,EAAOvB,KAAI,SAAA2B,EAAgBC,GAAK,IAAlBC,EAAGF,EAAHE,IAAKlE,EAAIgE,EAAJhE,KAAI,OACpBrB,EAAAA,EAAAA,MAAC4E,EAAAA,EAAK,CAAWY,MAAM,WAAUvF,SAAA,EAC7BC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CACNE,KAAM,CAACA,EAAM,SACbC,MAAO,CACH,CAAEC,UAAU,EAAMC,QAAS,kCAC3B,CACIiE,UAAW,SAACxE,EAAGG,GACX,IAA8CsE,EAArBhF,EAAKiF,iBAAtB3C,QAER,OAD+D,UADhD,IAAA0C,EAAG,GAAEA,GACCE,QAAO,SAAAC,GAAC,OAAIA,EAAEzE,QAAUA,CAAK,IAAEyC,OAE9CiC,QAAQC,UACRD,QAAQE,OAAO,mDACzB,IAEN/F,UAEFC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,CAACV,YAAY,qCAEtB4F,EAAQ,IACLpF,EAAAA,EAAAA,KAAC+F,EAAAA,GAAM,CAACC,MAAMhG,EAAAA,EAAAA,KAACiG,EAAAA,EAAmB,IAAKC,QAAS,kBAAMjB,EAAO9D,EAAK,MAnB9DkE,EAqBJ,KAEZrF,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAAAlB,UACNC,EAAAA,EAAAA,KAAC+F,EAAAA,GAAM,CACHxE,KAAK,OACL2E,QAAS,WACApD,EAAQqD,MAAK,SAAAR,GAAC,OAAKA,EAAEzE,KAAK,KAC3B8D,EAAI,CAAEjC,OAAOqD,EAAAA,EAAAA,MAAUlF,MAAO,IAEtC,EACA8E,MAAMhG,EAAAA,EAAAA,KAACqG,EAAAA,EAAY,IACnBC,OAAK,EAAAvG,SACR,iCAIN,OAIfC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACE,KAAK,aAAa6B,cAAc,UAASjD,UAChDC,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAAAlD,SAAC,gCAEdC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,2BAAOC,KAAK,QAAOpB,UAChCC,EAAAA,EAAAA,KAAC6C,EAAAA,EAAM,CAACC,QAASA,EAAQ4C,QAAO,SAAAC,GAAC,OAAIA,EAAEzE,KAAK,UAI5D,E,iFClDA,GA3BkB,SAAH0D,GAA8B,IAAD2B,EAAA3B,EAAvB4B,KAAAA,OAAI,IAAAD,EAAG,GAAEA,EACpBE,GAAMC,EAAAA,EAAAA,UAAQ,kBAAMF,EAAKG,QAAO,SAACC,EAAKC,GAAE,OAAKD,EAAMC,EAAGC,KAAK,GAAE,EAAE,GAAE,CAACN,IAExE,OACIxG,EAAAA,EAAAA,KAAA,OAAKwC,MAAO,CAAEuE,MAAO,QAASC,OAAQ,QAASC,OAAQ,QAASlH,UAC5DC,EAAAA,EAAAA,KAACkH,EAAAA,EAAmB,CAACH,MAAM,OAAOC,OAAO,OAAMjH,UAC3CD,EAAAA,EAAAA,MAACqH,EAAAA,EAAQ,CAAApH,SAAA,EACLC,EAAAA,EAAAA,KAACoH,EAAAA,EAAG,CACAZ,KAAMA,EACNa,QAAQ,QACRC,GAAG,MACHC,GAAG,MACHC,YAAa,GACbC,KAAK,UACLvG,MAAO,SAAAwG,GAAC,SAAAC,OAAOD,EAAEvG,KAAI,MAAAwG,QAAKC,EAAAA,GAAAA,IAAcF,EAAEZ,MAAQL,GAAI,EAAG1G,SAExDyG,EAAKhD,KAAI,SAACkE,EAAGhE,GAAC,OACX1D,EAAAA,EAAAA,KAAC6H,GAAAA,EAAI,CAASJ,KAAMK,GAAAA,GAAYpE,IAArBA,EAA2B,OAG9C1D,EAAAA,EAAAA,KAAC+H,GAAAA,EAAO,UAK5B,EC1BA,IACIxI,MAAO,eACPgC,KAAMC,EAAAA,EAAsBiD,MAC5BhD,UAAAA,EACAC,UAAAA,EACAC,UAAAA,GACAC,aAAcsC,GCFL8D,GAA0D,CACnEzI,MAAO,2BACP4E,YAAY,EACZ8D,KAAM,CACF,CAAElF,MAAO,KAAM7B,MAAO,gBAAOgH,SAAS,GACtC,CAAEnF,MAAO,KAAM7B,MAAO,gBAAOgH,SAAS,GACtC,CAAEnF,MAAO,KAAM7B,MAAO,gBAAOgH,SAAS,KCdtCzI,GAAcC,EAAAA,EAAdD,UAmBR,GAjByB,SAACE,GACtB,IAAAwI,GAAAtI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAA2DmI,IAAiCrI,GAAKyI,EAAAD,EAAzF5I,MAAAA,OAAK,IAAA6I,EAAG,GAAEA,EAAAC,EAAAF,EAAEhE,WAAAA,OAAU,IAAAkE,GAAQA,EAAAC,EAAAH,EAAEF,KAAAA,OAAI,IAAAK,EAAG,GAAEA,EAEjD,OACIxI,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAACP,GAAS,CAACQ,QAAM,EAAAF,SAAER,KACnBS,EAAAA,EAAAA,KAAC0E,EAAAA,EAAK,CAACC,UAAWR,EAAa,WAAa,aAAapE,SACpDkI,EAAKzE,KAAI,SAAAoB,GAAA,IAAG7B,EAAK6B,EAAL7B,MAAO7B,EAAK0D,EAAL1D,MAAOgH,EAAOtD,EAAPsD,QAAO,OAC9BlI,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAACF,MAAOA,EAAOmF,QAASA,EAAQnI,SACpCmB,GAD0C6B,EAEpC,QAK/B,EC+DA,GA5EkB,SAACpD,GACf,IAAQJ,EAAqDI,EAArDJ,MAAO4E,EAA8CxE,EAA9CwE,WAAUoE,EAAoC5I,EAAlCsI,KAAAA,OAAI,IAAAM,EAAG,GAAEA,EAAEpI,EAAuBR,EAAvBQ,SAAUC,EAAaT,EAAbS,SAEhDC,EAAeC,EAAAA,EAAKC,UAAbC,GAAiDC,EAAAA,EAAAA,GAAAJ,EAAA,GAA7C,GAMX,OAJAK,EAAAA,EAAAA,YAAU,WACNF,EAAKG,eAAe,CAAEpB,MAAAA,EAAO4E,WAAAA,EAAY8D,KAAAA,GAC7C,GAAG,CAAC1I,EAAO4E,EAAY8D,KAGnBnI,EAAAA,EAAAA,MAACQ,EAAAA,EAAI,CACDF,SAAUA,EACVQ,OAAO,WACPC,cAAe,CAAEtB,MAAAA,EAAO4E,WAAAA,EAAY8D,KAAAA,GACpCnH,eAAgB,SAACC,EAAGC,GACZb,GACAA,EAASa,EAEjB,EACAR,KAAMA,EAAKT,SAAA,EAEXC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACC,MAAM,2BAAOC,KAAK,QAAQC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,mCAAWvB,UAC/EC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,OAEVF,EAAAA,EAAAA,KAACM,EAAAA,EAAKwE,KAAI,CAAC3D,KAAK,OAAMpB,SACjB,SAACgF,EAAMH,GAAA,IAAII,EAAGJ,EAAHI,IAAKC,EAAML,EAANK,OAAM,OACnBnF,EAAAA,EAAAA,MAAAoF,EAAAA,SAAA,CAAAnF,SAAA,CACKgF,EAAOvB,KAAI,SAAA2B,EAAgBC,GAAK,IAAlBC,EAAGF,EAAHE,IAAKlE,EAAIgE,EAAJhE,KAAI,OACpBrB,EAAAA,EAAAA,MAAC4E,EAAAA,EAAK,CAAWY,MAAM,WAAUvF,SAAA,EAC7BC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACE,KAAM,CAACA,EAAM,WAAY6B,cAAc,UAASjD,UACvDC,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,OAEbjD,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CACNE,KAAM,CAACA,EAAM,SACbC,MAAO,CACH,CAAEC,UAAU,EAAMC,QAAS,kCAC3B,CACIiE,UAAW,SAACxE,EAAGG,GACX,IAA2CsE,EAArBhF,EAAKiF,iBAAnBwC,KAER,OAD4D,UADhD,IAAAzC,EAAG,GAAEA,GACCE,QAAO,SAAAC,GAAC,OAAIA,EAAEzE,QAAUA,CAAK,IAAEyC,OACnCiC,QAAQC,UAAYD,QAAQE,OAAO,mDACrD,IAEN/F,UAEFC,EAAAA,EAAAA,KAACE,EAAAA,EAAK,CAACV,YAAY,qCAEtB4F,EAAQ,IACLpF,EAAAA,EAAAA,KAAC+F,EAAAA,GAAM,CAACC,MAAMhG,EAAAA,EAAAA,KAACiG,EAAAA,EAAmB,IAAKC,QAAS,kBAAMjB,EAAO9D,EAAK,MApB9DkE,EAsBJ,KAEZrF,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAAAlB,UACNC,EAAAA,EAAAA,KAAC+F,EAAAA,GAAM,CACHxE,KAAK,OACL2E,QAAS,WACA+B,EAAK9B,MAAK,SAAAR,GAAC,OAAKA,EAAEzE,KAAK,KACxB8D,EAAI,CAAEjC,OAAOqD,EAAAA,EAAAA,MAAUlF,MAAO,GAAIgH,SAAS,GAEnD,EACAlC,MAAMhG,EAAAA,EAAAA,KAACqG,EAAAA,EAAY,IACnBC,OAAK,EAAAvG,SACR,iCAIN,KAGXC,EAAAA,EAAAA,KAACM,EAAAA,EAAKW,KAAI,CAACE,KAAK,aAAa6B,cAAc,UAASjD,UAChDC,EAAAA,EAAAA,KAACiD,EAAAA,EAAQ,CAAAlD,SAAC,iCAI1B,E,wEC1DA,GAjBkB,SAAH6E,GAA8B,IAAD2B,EAAA3B,EAAvB4B,KAAAA,OAAI,IAAAD,EAAG,GAAEA,EAC1B,OACIvG,EAAAA,EAAAA,KAAA,OAAKwC,MAAO,CAAEuE,MAAO,QAASC,OAAQ,QAASC,OAAQ,QAASlH,UAC5DC,EAAAA,EAAAA,KAACkH,EAAAA,EAAmB,CAACH,MAAM,OAAOC,OAAO,OAAMjH,UAC3CD,EAAAA,EAAAA,MAAC0I,GAAAA,EAAQ,CAACzB,MAAO,IAAKC,OAAQ,GAAIR,KAAMA,EAAKzG,SAAA,EACzCC,EAAAA,EAAAA,KAACyI,GAAAA,EAAa,CAACC,gBAAgB,SAC/B1I,EAAAA,EAAAA,KAAC2I,GAAAA,EAAK,CAACtB,QAAQ,UACfrH,EAAAA,EAAAA,KAAC4I,GAAAA,EAAK,KACN5I,EAAAA,EAAAA,KAAC+H,GAAAA,EAAO,KACR/H,EAAAA,EAAAA,KAAC6I,GAAAA,EAAM,KACP7I,EAAAA,EAAAA,KAAC8I,GAAAA,EAAG,CAACzB,QAAQ,QAAQI,KAAK,kBAK9C,ECdA,IACIlI,MAAO,eACPgC,KAAMC,EAAAA,EAAsByB,SAC5BxB,UAAAA,GACAC,UAAAA,GACAC,UAAAA,GACAC,aAAcoG,ICLNe,GAAS,SAATA,GAAS,OAATA,EAAS,gCAATA,EAAS,iCAATA,EAAS,kCAATA,CAAS,MAMRC,GAAkF,CAC3F,CACIC,UAAWF,GAAUG,KACrBC,WAAY,CAACC,EAAuBC,EAA2BC,IAEnE,CACIL,UAAWF,GAAU7I,MACrBiJ,WAAY,CAACI,EAAuBC,IAExC,CACIP,UAAWF,GAAUlG,OACrBsG,WAAY,CAACM,GAAuBC,MAI/BC,IAAiBC,EAAA,IAAAC,EAAAA,EAAAA,GAAAD,EACzBpI,EAAAA,EAAsBtB,MAAQqJ,IAAqBM,EAAAA,EAAAA,GAAAD,EACnDpI,EAAAA,EAAsBQ,SAAWwH,IAAwBK,EAAAA,EAAAA,GAAAD,EACzDpI,EAAAA,EAAsBa,MAAQ+G,IAAqBS,EAAAA,EAAAA,GAAAD,EACnDpI,EAAAA,EAAsB/B,UAAY4J,IAAyBQ,EAAAA,EAAAA,GAAAD,EAC3DpI,EAAAA,EAAsByC,KAAOqF,IAAoBO,EAAAA,EAAAA,GAAAD,EACjDpI,EAAAA,EAAsBiD,MAAQgF,KAAqBI,EAAAA,EAAAA,GAAAD,EACnDpI,EAAAA,EAAsByB,SAAWyG,IAAwBE,E,uCCvB9D,IAVA,WACI,IAAMT,GAAaW,EAAAA,EAAAA,KAAgD,SAAAC,GAAK,OAAIA,EAAMZ,WAAWa,OAAO,IAE5FC,EAA+Cd,EAA/Cc,cAAeC,EAAgCf,EAAhCe,WAAYC,EAAoBhB,EAApBgB,gBAE7BC,EAAoBH,EAAcI,MAAK,SAAAC,GAAC,OAAIA,EAAEC,QAAUL,CAAU,IAExE,MAAO,CAAED,cAAAA,EAAeC,WAAAA,EAAYE,kBAAAA,EAAmBD,gBAAAA,EAC3D,C,uCCFA,IANA,WAGI,OAFiBL,EAAAA,EAAAA,KAA0C,SAAAC,GAAK,OAAIA,EAAMS,QAAQ,GAGtF,C,yGCiCA,IAjCA,WACI,IAA+BC,GAAXC,EAAAA,EAAAA,MAAZC,GAAAA,OAAE,IAAAF,EAAG,GAAEA,EACTG,GAAWC,EAAAA,EAAAA,MACjBC,GAAsCC,EAAAA,EAAAA,IAClC,SAACJ,GACG,IAAKA,EAAI,MAAM,IAAIK,MAAM,+BACzB,OAAOC,EAAAA,EAAAA,IAAmBN,EAC9B,GACA,CACIO,QAAQ,IANR1E,EAAIsE,EAAJtE,KAAM2E,EAAOL,EAAPK,QAASC,EAAKN,EAALM,MAAOC,EAAGP,EAAHO,IA2B9B,OAjBA3K,EAAAA,EAAAA,YAAU,WACN2K,EAAIV,EACR,GAAG,CAACA,KAEJjK,EAAAA,EAAAA,YAAU,WACN,GAAK8F,EAAL,CACA,IAAA8E,EAAsE9E,EAA9DyD,cAAAA,OAAa,IAAAqB,EAAG,GAAEA,EAAEX,EAA0CnE,EAA1CmE,GAAIpL,EAAsCiH,EAAtCjH,MAAOsE,EAA+B2C,EAA/B3C,KAAM0H,EAAyB/E,EAAzB+E,YAAaC,EAAYhF,EAAZgF,GAAIC,EAAQjF,EAARiF,IAE1DvB,EAAa,GACbD,EAActG,OAAS,IACvBuG,EAAaD,EAAc,GAAGM,OAGlCK,GAASc,EAAAA,EAAAA,IAAgB,CAAExB,WAAAA,EAAYD,cAAAA,EAAeE,gBAAiB,QACvES,GAASe,EAAAA,EAAAA,IAAc,CAAEhB,GAAAA,EAAIpL,MAAAA,EAAOsE,KAAAA,EAAM0H,YAAAA,EAAaC,GAAAA,EAAIC,IAAAA,IAT1C,CAUrB,GAAG,CAACjF,IAEG,CAAE2E,QAAAA,EAASC,MAAAA,EACtB,C","sources":["components/QuestionComponents/QuestionInput/interface.ts","components/QuestionComponents/QuestionInput/Component.tsx","components/QuestionComponents/QuestionInput/PropsForm.tsx","components/QuestionComponents/QuestionInput/index.ts","components/QuestionComponents/QuestionTextarea/interface.ts","components/QuestionComponents/QuestionTextarea/Component.tsx","components/QuestionComponents/QuestionTextarea/PropsForm.tsx","components/QuestionComponents/QuestionTextarea/index.ts","components/QuestionComponents/QuestionTitle/interface.ts","components/QuestionComponents/QuestionTitle/Component.tsx","components/QuestionComponents/QuestionTitle/PropsForm.tsx","components/QuestionComponents/QuestionTitle/index.ts","components/QuestionComponents/QuestionParagraph/interface.ts","components/QuestionComponents/QuestionParagraph/Component.tsx","components/QuestionComponents/QuestionParagraph/PropsForm.tsx","components/QuestionComponents/QuestionParagraph/index.ts","components/QuestionComponents/QuestionInfo/interface.ts","components/QuestionComponents/QuestionInfo/Component.tsx","components/QuestionComponents/QuestionInfo/PropsForm.tsx","components/QuestionComponents/QuestionInfo/index.ts","components/QuestionComponents/QuestionRadio/interface.ts","components/QuestionComponents/QuestionRadio/Component.tsx","components/QuestionComponents/QuestionRadio/PropsForm.tsx","components/QuestionComponents/QuestionRadio/StatChart.tsx","components/QuestionComponents/QuestionRadio/index.ts","components/QuestionComponents/QuestionCheckbox/interface.ts","components/QuestionComponents/QuestionCheckbox/Component.tsx","components/QuestionComponents/QuestionCheckbox/PropsForm.tsx","components/QuestionComponents/QuestionCheckbox/StatChart.tsx","components/QuestionComponents/QuestionCheckbox/index.ts","components/QuestionComponents/index.ts","hooks/useGetComponentInfo.ts","hooks/useGetQuestionPageInfo.ts","hooks/useLoadQuestionData.ts"],"sourcesContent":["import { QuestionCommonPropsType } from '@/types/question';\n\nexport interface QuestionInputPropsType extends QuestionCommonPropsType {\n    title?: string;\n    placeholder?: string;\n}\n\nexport const QuestionInputDefaultProps: QuestionInputPropsType = {\n    title: '输入框标题',\n    placeholder: '请输入',\n};\n","import React from 'react';\nimport { QuestionInputDefaultProps, QuestionInputPropsType } from './interface';\nimport { Input, Typography } from 'antd';\n\nconst { Paragraph } = Typography;\n\nconst QuestionInput = (props: QuestionInputPropsType) => {\n    const { title, placeholder } = { ...QuestionInputDefaultProps, ...props };\n    return (\n        <div>\n            <Paragraph strong>{title}</Paragraph>\n            <div>\n                <Input placeholder={placeholder} />\n            </div>\n        </div>\n    );\n};\n\nexport default QuestionInput;\n","import React, { useEffect } from 'react';\nimport { QuestionInputPropsType } from './interface';\nimport { Form, Input } from 'antd';\n\ntype Props = QuestionInputPropsType;\n\nconst PropsForm = (props: Props) => {\n    const { title, placeholder, onChange, disabled } = props;\n\n    const [form] = Form.useForm<QuestionInputPropsType>();\n\n    useEffect(() => {\n        form.setFieldsValue({ title, placeholder });\n    }, [title, placeholder]);\n\n    return (\n        <Form\n            disabled={disabled}\n            layout='vertical'\n            initialValues={{ title, placeholder }}\n            onValuesChange={(_, allFields) => {\n                onChange && onChange(allFields);\n            }}\n            form={form}\n        >\n            <Form.Item label='标题' name='title' rules={[{ required: true, message: '请输入标题' }]}>\n                <Input />\n            </Form.Item>\n            <Form.Item label='输入框提示' name='placeholder' rules={[{ required: true, message: '请输入标题' }]}>\n                <Input />\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default PropsForm;\n","import { QuestionComponentType } from '@/const/question';\nimport Component from './Component';\nimport { QuestionInputDefaultProps } from './interface';\nimport PropsForm from './PropsForm';\n\nexport * from './interface';\n\nexport default {\n    title: '输入框',\n    type: QuestionComponentType.Input,\n    Component,\n    PropsForm,\n    StatChart: null,\n    defaultProps: QuestionInputDefaultProps,\n};\n","import { QuestionCommonPropsType } from '@/types/question';\n\nexport interface QuestionTextareaPropsType extends QuestionCommonPropsType {\n    title?: string;\n    placeholder?: string;\n}\n\nexport const QuestionTextareaDefaultProps: QuestionTextareaPropsType = {\n    title: '多行输入框标题',\n    placeholder: '请输入',\n};\n","import React from 'react';\nimport { QuestionTextareaDefaultProps, QuestionTextareaPropsType } from './interface';\nimport { Input, Typography } from 'antd';\n\nconst { Paragraph } = Typography;\n\nconst QuestionTextarea = (props: QuestionTextareaPropsType) => {\n    const { title, placeholder } = { ...QuestionTextareaDefaultProps, ...props };\n    return (\n        <div>\n            <Paragraph strong>{title}</Paragraph>\n            <div>\n                <Input.TextArea placeholder={placeholder} />\n            </div>\n        </div>\n    );\n};\n\nexport default QuestionTextarea;\n","import React, { useEffect } from 'react';\nimport { QuestionTextareaPropsType } from './interface';\nimport { Form, Input } from 'antd';\n\ntype Props = QuestionTextareaPropsType;\n\nconst PropsForm = (props: Props) => {\n    const { title, placeholder, onChange, disabled } = props;\n\n    const [form] = Form.useForm<QuestionTextareaPropsType>();\n\n    useEffect(() => {\n        form.setFieldsValue({ title, placeholder });\n    }, [title, placeholder]);\n\n    return (\n        <Form\n            disabled={disabled}\n            layout='vertical'\n            initialValues={{ title, placeholder }}\n            onValuesChange={(_, allFields) => {\n                onChange && onChange(allFields);\n            }}\n            form={form}\n        >\n            <Form.Item label='标题' name='title' rules={[{ required: true, message: '请输入标题' }]}>\n                <Input />\n            </Form.Item>\n            <Form.Item label='输入框提示' name='placeholder' rules={[{ required: true, message: '请输入标题' }]}>\n                <Input.TextArea />\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default PropsForm;\n","import { QuestionComponentType } from '@/const/question';\nimport Component from './Component';\nimport { QuestionTextareaDefaultProps } from './interface';\nimport PropsForm from './PropsForm';\n\nexport * from './interface';\n\nexport default {\n    title: '输入框',\n    type: QuestionComponentType.Textarea,\n    Component,\n    PropsForm,\n    StatChart: null,\n    defaultProps: QuestionTextareaDefaultProps,\n};\n","import { QuestionCommonPropsType } from '@/types/question';\n\nexport interface QuestionTitlePropsType extends QuestionCommonPropsType {\n    text?: string;\n    level?: 1 | 2 | 3 | 4 | 5;\n    isCenter?: boolean;\n}\n\nexport const QuestionTitleDefaultProps: QuestionTitlePropsType = {\n    text: '一行标题',\n    level: 1,\n    isCenter: false,\n};\n","import React from 'react';\nimport { QuestionTitleDefaultProps, QuestionTitlePropsType } from './interface';\nimport { Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst QuestionTitle = (props: QuestionTitlePropsType) => {\n    const { text, level = 1, isCenter } = { ...QuestionTitleDefaultProps, ...props };\n\n    const genFontSize = (level: number) => {\n        switch (level) {\n            case 1:\n                return '24px';\n            case 2:\n                return '20px';\n            case 3:\n                return '16px';\n\n            default:\n                return '16px';\n        }\n    };\n\n    return (\n        <Title\n            level={level}\n            style={{ textAlign: isCenter ? 'center' : 'start', marginBottom: 0, fontSize: genFontSize(level) }}\n        >\n            {text}\n        </Title>\n    );\n};\n\nexport default QuestionTitle;\n","import React, { useEffect } from 'react';\nimport { QuestionTitlePropsType } from './interface';\nimport { Checkbox, Form, Input, Select } from 'antd';\n\ntype Props = QuestionTitlePropsType;\n\nconst PropsForm = (props: Props) => {\n    const { text, level, isCenter, onChange, disabled } = props;\n\n    const [form] = Form.useForm<QuestionTitlePropsType>();\n\n    useEffect(() => {\n        form.setFieldsValue({ text, level, isCenter });\n    }, [text, level, isCenter]);\n\n    return (\n        <Form\n            disabled={disabled}\n            layout='vertical'\n            initialValues={{ text, level, isCenter }}\n            onValuesChange={(_, allFields) => {\n                onChange && onChange(allFields);\n            }}\n            form={form}\n        >\n            <Form.Item label='标题' name='text' rules={[{ required: true, message: '请输入标题' }]}>\n                <Input />\n            </Form.Item>\n            <Form.Item label='层级' name='level' rules={[{ required: true, message: '请输入标题' }]}>\n                <Select\n                    options={[\n                        { value: 1, text: 1 },\n                        { value: 2, text: 2 },\n                        { value: 3, text: 3 },\n                    ]}\n                />\n            </Form.Item>\n            <Form.Item name='isCenter' valuePropName='checked'>\n                <Checkbox>居中显示</Checkbox>\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default PropsForm;\n","import { QuestionComponentType } from '@/const/question';\nimport Component from './Component';\nimport { QuestionTitleDefaultProps } from './interface';\nimport PropsForm from './PropsForm';\n\nexport * from './interface';\n\nexport default {\n    title: '标题',\n    type: QuestionComponentType.Title,\n    Component,\n    PropsForm,\n    StatChart: null,\n    defaultProps: QuestionTitleDefaultProps,\n};\n","import { QuestionCommonPropsType } from '@/types/question';\n\nexport interface QuestionParagraphPropsType extends QuestionCommonPropsType {\n    text?: string;\n    isCenter?: boolean;\n}\n\nexport const QuestionParagraphDefaultProps: QuestionParagraphPropsType = {\n    text: '一行段落',\n    isCenter: false,\n};\n","import React from 'react';\nimport { QuestionParagraphDefaultProps, QuestionParagraphPropsType } from './interface';\nimport { Typography } from 'antd';\ntype Props = QuestionParagraphPropsType;\n\nconst { Paragraph } = Typography;\n\nconst QuestionParagraph = (props: Props) => {\n    const { text = '', isCenter = false } = { ...QuestionParagraphDefaultProps, ...props };\n\n    const textList = text.split('\\n');\n\n    return (\n        <Paragraph style={{ textAlign: isCenter ? 'center' : 'start', marginBottom: '0px' }}>\n            {textList.map((t, i) => (\n                <span key={i}>\n                    {t}\n                    {i !== textList.length - 1 && <br />}\n                </span>\n            ))}\n        </Paragraph>\n    );\n};\n\nexport default QuestionParagraph;\n","import React, { useEffect } from 'react';\nimport { QuestionParagraphPropsType } from './interface';\nimport { Checkbox, Form, Input } from 'antd';\n\ntype Props = QuestionParagraphPropsType;\n\nconst PropsForm = (props: Props) => {\n    const { text, isCenter, onChange, disabled } = props;\n\n    const [form] = Form.useForm<QuestionParagraphPropsType>();\n\n    useEffect(() => {\n        form.setFieldsValue({ text, isCenter });\n    }, [text, isCenter]);\n\n    return (\n        <Form\n            disabled={disabled}\n            layout='vertical'\n            initialValues={{ text, isCenter }}\n            onValuesChange={(_, allFields) => {\n                onChange && onChange(allFields);\n            }}\n            form={form}\n        >\n            <Form.Item label='段落内容' name='text' rules={[{ required: true, message: '请输入内容' }]}>\n                <Input.TextArea />\n            </Form.Item>\n\n            <Form.Item name='isCenter' valuePropName='checked'>\n                <Checkbox>居中显示</Checkbox>\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default PropsForm;\n","import { QuestionComponentType } from '@/const/question';\nimport Component from './Component';\nimport { QuestionParagraphDefaultProps } from './interface';\nimport PropsForm from './PropsForm';\n\nexport * from './interface';\n\nexport default {\n    title: '段落',\n    type: QuestionComponentType.Paragraph,\n    Component,\n    PropsForm,\n    StatChart: null,\n    defaultProps: QuestionParagraphDefaultProps,\n};\n","import { QuestionCommonPropsType } from '@/types/question';\n\nexport interface QuestionInfoPropsType extends QuestionCommonPropsType {\n    title?: string;\n    desc?: string;\n}\n\nexport const QuestionInfoDefaultProps: QuestionInfoPropsType = {\n    /**\n     * 标题\n     * @default 标题\n     */\n\n    title: '标题',\n    /**\n     * 标题描述\n     * @default 描述\n     */\n    desc: '描述',\n};\n","import React from 'react';\nimport { QuestionInfoDefaultProps, QuestionInfoPropsType } from './interface';\nimport { Typography } from 'antd';\n\nconst { Title, Paragraph } = Typography;\n\nconst QuestionInput = (props: QuestionInfoPropsType) => {\n    const { title = '', desc = '' } = { ...QuestionInfoDefaultProps, ...props };\n\n    const textList = desc.split('\\n');\n\n    return (\n        <div style={{ textAlign: 'center' }}>\n            <Title style={{ fontSize: '24px' }}>{title}</Title>\n            <Paragraph>\n                {' '}\n                {textList.map((t, i) => (\n                    <span key={i}>\n                        {t}\n                        {i !== textList.length - 1 && <br />}\n                    </span>\n                ))}\n            </Paragraph>\n        </div>\n    );\n};\n\nexport default QuestionInput;\n","import React, { useEffect } from 'react';\nimport { QuestionInfoPropsType } from './interface';\nimport { Form, Input } from 'antd';\n\ntype Props = QuestionInfoPropsType;\n\nconst PropsForm = (props: Props) => {\n    const { title, desc, onChange, disabled } = props;\n\n    const [form] = Form.useForm<QuestionInfoPropsType>();\n\n    useEffect(() => {\n        form.setFieldsValue({ title, desc });\n    }, [title, desc]);\n\n    return (\n        <Form\n            disabled={disabled}\n            layout='vertical'\n            initialValues={{ title, desc }}\n            onValuesChange={(_, allFields) => {\n                onChange && onChange(allFields);\n            }}\n            form={form}\n        >\n            <Form.Item label='标题' name='title' rules={[{ required: true, message: '请输入标题' }]}>\n                <Input />\n            </Form.Item>\n            <Form.Item label='描述' name='desc'>\n                <Input.TextArea />\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default PropsForm;\n","import { QuestionComponentType } from '@/const/question';\nimport Component from './Component';\nimport { QuestionInfoDefaultProps } from './interface';\nimport PropsForm from './PropsForm';\n\nexport * from './interface';\n\nexport default {\n    title: '输入框',\n    type: QuestionComponentType.Info,\n    Component,\n    PropsForm,\n    StatChart: null,\n    defaultProps: QuestionInfoDefaultProps,\n};\n","import { QuestionCommonPropsType } from '@/types/question';\n\nexport interface QuestionRadioPropsType extends QuestionCommonPropsType {\n    title?: string;\n    isVertical?: boolean;\n    options?: {\n        value: string;\n        label: string;\n    }[];\n    value?: string;\n}\n\nexport const QuestionRadioDefaultProps: QuestionRadioPropsType = {\n    title: '单选标题',\n    isVertical: false,\n    options: [\n        { value: 'v1', label: '选项1' },\n        { value: 'v2', label: '选项2' },\n        { value: 'v3', label: '选项3' },\n    ],\n    value: '',\n};\n\nexport type QuestionRadioStatProps = { name: string; count: number };\n","import React from 'react';\nimport { QuestionRadioDefaultProps, QuestionRadioPropsType } from './interface';\nimport { Radio, Space, Typography } from 'antd';\n\nconst { Paragraph } = Typography;\n\nconst QuestionRadio = (props: QuestionRadioPropsType) => {\n    const { title = '', isVertical = false, options = [], value = '' } = { ...QuestionRadioDefaultProps, ...props };\n\n    return (\n        <div>\n            <Paragraph strong>{title}</Paragraph>\n            <Radio.Group value={value}>\n                <Space direction={isVertical ? 'vertical' : 'horizontal'}>\n                    {options.map(({ value, label }) => (\n                        <Radio value={value} key={value}>\n                            {label}\n                        </Radio>\n                    ))}\n                </Space>\n            </Radio.Group>\n        </div>\n    );\n};\n\nexport default QuestionRadio;\n","import React, { useEffect } from 'react';\nimport { QuestionRadioPropsType } from './interface';\nimport { Button, Checkbox, Form, Input, Select, Space } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { nanoid } from 'nanoid';\n\ntype Props = QuestionRadioPropsType;\n\nconst PropsForm = (props: Props) => {\n    const { title, isVertical, options = [], value, onChange, disabled } = props;\n\n    const [form] = Form.useForm<QuestionRadioPropsType>();\n\n    useEffect(() => {\n        form.setFieldsValue({ title, isVertical, options, value });\n    }, [title, isVertical, options, value]);\n\n    return (\n        <Form\n            disabled={disabled}\n            layout='vertical'\n            initialValues={{ title, isVertical, options, value }}\n            onValuesChange={(_, allFields) => {\n                if (onChange) {\n                    onChange(allFields);\n                }\n            }}\n            form={form}\n        >\n            <Form.Item label='标题' name='title' rules={[{ required: true, message: '请输入标题' }]}>\n                <Input />\n            </Form.Item>\n            <Form.Item label='选项'>\n                <Form.List name='options'>\n                    {(fields, { add, remove }) => (\n                        <>\n                            {fields.map(({ key, name }, index) => (\n                                <Space key={key} align='baseline'>\n                                    <Form.Item\n                                        name={[name, 'label']}\n                                        rules={[\n                                            { required: true, message: '请输入选项' },\n                                            {\n                                                validator: (_, label) => {\n                                                    const { options = [] } = form.getFieldsValue();\n                                                    const only = options.filter(v => v.label === label).length === 1;\n                                                    return only\n                                                        ? Promise.resolve()\n                                                        : Promise.reject('和其他选项重复了');\n                                                },\n                                            },\n                                        ]}\n                                    >\n                                        <Input placeholder='请输入选项'></Input>\n                                    </Form.Item>\n                                    {index > 1 && (\n                                        <Button icon={<MinusCircleOutlined />} onClick={() => remove(name)}></Button>\n                                    )}\n                                </Space>\n                            ))}\n                            <Form.Item>\n                                <Button\n                                    type='link'\n                                    onClick={() => {\n                                        if (!options.some(v => !v.label)) {\n                                            add({ value: nanoid(), label: '' });\n                                        }\n                                    }}\n                                    icon={<PlusOutlined />}\n                                    block\n                                >\n                                    添加选项\n                                </Button>\n                            </Form.Item>\n                        </>\n                    )}\n                </Form.List>\n            </Form.Item>\n            <Form.Item name='isVertical' valuePropName='checked'>\n                <Checkbox>垂直排列</Checkbox>\n            </Form.Item>\n            <Form.Item label='默认选中' name='value'>\n                <Select options={options.filter(v => v.label)} />\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default PropsForm;\n","import React, { useMemo } from 'react';\n\nimport { PieChart, Pie, ResponsiveContainer, Tooltip, Cell } from 'recharts';\nimport { STAT_COLORS } from '@/const';\nimport { formatPercent } from '@/utils';\nimport { QuestionRadioStatProps } from './interface';\n\ntype Props = { data: QuestionRadioStatProps[] };\n\nconst StatChart = ({ data = [] }: Props) => {\n    const sum = useMemo(() => data.reduce((pre, cV) => pre + cV.count, 0), [data]);\n\n    return (\n        <div style={{ width: '400px', height: '400px', margin: 'auto' }}>\n            <ResponsiveContainer width='100%' height='100%'>\n                <PieChart>\n                    <Pie\n                        data={data}\n                        dataKey='count'\n                        cx='50%'\n                        cy='50%'\n                        outerRadius={60}\n                        fill='#8884d8'\n                        label={o => `${o.name}: ${formatPercent(o.count / sum)}`}\n                    >\n                        {data.map((o, i) => (\n                            <Cell key={i} fill={STAT_COLORS[i]} />\n                        ))}\n                    </Pie>\n                    <Tooltip />\n                </PieChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n\nexport default StatChart;\n","import { QuestionComponentType } from '@/const/question';\nimport Component from './Component';\nimport { QuestionRadioDefaultProps } from './interface';\nimport PropsForm from './PropsForm';\nimport StatChart from './StatChart';\n\nexport * from './interface';\n\nexport default {\n    title: '单选',\n    type: QuestionComponentType.Radio,\n    Component,\n    PropsForm,\n    StatChart,\n    defaultProps: QuestionRadioDefaultProps,\n};\n","import { QuestionCommonPropsType } from '@/types/question';\n\nexport interface QuestionCheckboxPropsType extends QuestionCommonPropsType {\n    title?: string;\n    isVertical?: boolean;\n    list?: {\n        value: string;\n        label: string;\n        checked: boolean;\n    }[];\n}\n\nexport const QuestionCheckboxDefaultProps: QuestionCheckboxPropsType = {\n    title: '多选标题',\n    isVertical: false,\n    list: [\n        { value: 'v1', label: '选项1', checked: false },\n        { value: 'v2', label: '选项2', checked: false },\n        { value: 'v3', label: '选项3', checked: false },\n    ],\n};\n\nexport type QuestionCheckboxStatProps = { name: string; count: number };\n","import React from 'react';\nimport { QuestionCheckboxDefaultProps, QuestionCheckboxPropsType } from './interface';\nimport { Checkbox, Space, Typography } from 'antd';\n\nconst { Paragraph } = Typography;\n\nconst QuestionCheckbox = (props: QuestionCheckboxPropsType) => {\n    const { title = '', isVertical = false, list = [] } = { ...QuestionCheckboxDefaultProps, ...props };\n\n    return (\n        <div>\n            <Paragraph strong>{title}</Paragraph>\n            <Space direction={isVertical ? 'vertical' : 'horizontal'}>\n                {list.map(({ value, label, checked }) => (\n                    <Checkbox value={value} checked={checked} key={value}>\n                        {label}\n                    </Checkbox>\n                ))}\n            </Space>\n        </div>\n    );\n};\n\nexport default QuestionCheckbox;\n","import React, { useEffect } from 'react';\nimport { QuestionCheckboxPropsType } from './interface';\nimport { Button, Checkbox, Form, Input, Space } from 'antd';\nimport { MinusCircleOutlined, PlusOutlined } from '@ant-design/icons';\nimport { nanoid } from 'nanoid';\n\ntype Props = QuestionCheckboxPropsType;\n\nconst PropsForm = (props: Props) => {\n    const { title, isVertical, list = [], onChange, disabled } = props;\n\n    const [form] = Form.useForm<QuestionCheckboxPropsType>();\n\n    useEffect(() => {\n        form.setFieldsValue({ title, isVertical, list });\n    }, [title, isVertical, list]);\n\n    return (\n        <Form\n            disabled={disabled}\n            layout='vertical'\n            initialValues={{ title, isVertical, list }}\n            onValuesChange={(_, allFields) => {\n                if (onChange) {\n                    onChange(allFields);\n                }\n            }}\n            form={form}\n        >\n            <Form.Item label='多选标题' name='title' rules={[{ required: true, message: '请输入标题' }]}>\n                <Input />\n            </Form.Item>\n            <Form.List name='list'>\n                {(fields, { add, remove }) => (\n                    <>\n                        {fields.map(({ key, name }, index) => (\n                            <Space key={key} align='baseline'>\n                                <Form.Item name={[name, 'checked']} valuePropName='checked'>\n                                    <Checkbox />\n                                </Form.Item>\n                                <Form.Item\n                                    name={[name, 'label']}\n                                    rules={[\n                                        { required: true, message: '请输入选项' },\n                                        {\n                                            validator: (_, label) => {\n                                                const { list = [] } = form.getFieldsValue();\n                                                const only = list.filter(v => v.label === label).length === 1;\n                                                return only ? Promise.resolve() : Promise.reject('和其他选项重复了');\n                                            },\n                                        },\n                                    ]}\n                                >\n                                    <Input placeholder='请输入选项'></Input>\n                                </Form.Item>\n                                {index > 0 && (\n                                    <Button icon={<MinusCircleOutlined />} onClick={() => remove(name)}></Button>\n                                )}\n                            </Space>\n                        ))}\n                        <Form.Item>\n                            <Button\n                                type='link'\n                                onClick={() => {\n                                    if (!list.some(v => !v.label)) {\n                                        add({ value: nanoid(), label: '', checked: false });\n                                    }\n                                }}\n                                icon={<PlusOutlined />}\n                                block\n                            >\n                                添加选项\n                            </Button>\n                        </Form.Item>\n                    </>\n                )}\n            </Form.List>\n            <Form.Item name='isVertical' valuePropName='checked'>\n                <Checkbox>垂直对齐</Checkbox>\n            </Form.Item>\n        </Form>\n    );\n};\n\nexport default PropsForm;\n","import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport { QuestionCheckboxStatProps } from './interface';\n\ntype Props = { data: QuestionCheckboxStatProps[] };\n\nconst StatChart = ({ data = [] }: Props) => {\n    return (\n        <div style={{ width: '400px', height: '400px', margin: 'auto' }}>\n            <ResponsiveContainer width='100%' height='100%'>\n                <BarChart width={150} height={40} data={data}>\n                    <CartesianGrid strokeDasharray='3 3' />\n                    <XAxis dataKey='name' />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey='count' fill='#8884d8' />\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n\nexport default StatChart;\n","import { QuestionComponentType } from '@/const/question';\nimport Component from './Component';\nimport { QuestionCheckboxDefaultProps } from './interface';\nimport PropsForm from './PropsForm';\nimport StatChart from './StatChart';\n\nexport * from './interface';\n\nexport default {\n    title: '多选',\n    type: QuestionComponentType.Checkbox,\n    Component,\n    PropsForm,\n    StatChart,\n    defaultProps: QuestionCheckboxDefaultProps,\n};\n","import { QuestionComponentType } from '@/const/question';\nimport QuestionInputConfType from './QuestionInput/';\nimport QuestionTextareaConfType from './QuestionTextarea/';\nimport QuestionTitleConfType from './QuestionTitle/';\nimport QuestionParagraphConfType from './QuestionParagraph/';\nimport QuestionInfoConfType from './QuestionInfo/';\nimport QuestionRadioConfType from './QuestionRadio/';\nimport QuestionCheckboxConfType from './QuestionCheckbox/';\n\nexport enum GroupType {\n    Text = '文本显示',\n    Input = '用户输入',\n    Select = '用户选择',\n}\n\nexport const componentConfGroup: { groupName: GroupType; components: ComponentConfType[] }[] = [\n    {\n        groupName: GroupType.Text,\n        components: [QuestionTitleConfType, QuestionParagraphConfType, QuestionInfoConfType],\n    },\n    {\n        groupName: GroupType.Input,\n        components: [QuestionInputConfType, QuestionTextareaConfType],\n    },\n    {\n        groupName: GroupType.Select,\n        components: [QuestionRadioConfType, QuestionCheckboxConfType],\n    },\n];\n\nexport const componentConfList = {\n    [QuestionComponentType.Input]: QuestionInputConfType,\n    [QuestionComponentType.Textarea]: QuestionTextareaConfType,\n    [QuestionComponentType.Title]: QuestionTitleConfType,\n    [QuestionComponentType.Paragraph]: QuestionParagraphConfType,\n    [QuestionComponentType.Info]: QuestionInfoConfType,\n    [QuestionComponentType.Radio]: QuestionRadioConfType,\n    [QuestionComponentType.Checkbox]: QuestionCheckboxConfType,\n};\n\nexport type ComponentConfList = typeof componentConfList;\nexport type ComponentConfType = ComponentConfList[keyof ComponentConfList];\nexport type ComponentPropsType = ComponentConfType['defaultProps'];\n","import { ComponentStateType } from '@/store/componentsReducer';\nimport { StoreStateType } from '@/store/index';\nimport { useSelector } from 'react-redux';\n\nfunction useGetComponentInfo() {\n    const components = useSelector<StoreStateType, ComponentStateType>(state => state.components.present);\n\n    const { componentList, selectedId, copiedComponent } = components;\n\n    const selectedComponent = componentList.find(c => c.fe_id === selectedId);\n\n    return { componentList, selectedId, selectedComponent, copiedComponent };\n}\n\nexport default useGetComponentInfo;\n","import { StoreStateType } from '@/store/index';\nimport { PageInfoType } from '@/store/pageInfo';\nimport { useSelector } from 'react-redux';\n\nfunction useGetQuestionPageInfo() {\n    const pageInfo = useSelector<StoreStateType, PageInfoType>(state => state.pageInfo);\n\n    return pageInfo;\n}\n\nexport default useGetQuestionPageInfo;\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getQuestionService } from '../services/question';\nimport { useRequest } from 'ahooks';\nimport { useDispatch } from 'react-redux';\nimport { resetComponents } from '@/store/componentsReducer';\nimport { resetPageInfo } from '@/store/pageInfo';\n\nfunction useLoadQuestionData() {\n    const { id = '' } = useParams();\n    const dispatch = useDispatch();\n    const { data, loading, error, run } = useRequest(\n        (id: string) => {\n            if (!id) throw new Error('没有问卷 id');\n            return getQuestionService(id);\n        },\n        {\n            manual: true,\n        },\n    );\n\n    useEffect(() => {\n        run(id);\n    }, [id]);\n\n    useEffect(() => {\n        if (!data) return;\n        const { componentList = [], id, title, desc, isPublished, js, css } = data;\n\n        let selectedId = '';\n        if (componentList.length > 0) {\n            selectedId = componentList[0].fe_id;\n        }\n\n        dispatch(resetComponents({ selectedId, componentList, copiedComponent: null }));\n        dispatch(resetPageInfo({ id, title, desc, isPublished, js, css }));\n    }, [data]);\n\n    return { loading, error };\n}\n\nexport default useLoadQuestionData;\n"],"names":["QuestionInputDefaultProps","title","placeholder","Paragraph","Typography","props","_QuestionInputDefault","_objectSpread","_jsxs","children","_jsx","strong","Input","onChange","disabled","_Form$useForm","Form","useForm","form","_slicedToArray","useEffect","setFieldsValue","layout","initialValues","onValuesChange","_","allFields","Item","label","name","rules","required","message","type","QuestionComponentType","Component","PropsForm","StatChart","defaultProps","QuestionTextareaDefaultProps","_QuestionTextareaDefa","TextArea","Textarea","QuestionTitleDefaultProps","text","level","isCenter","Title","_QuestionTitleDefault","_QuestionTitleDefault2","style","textAlign","marginBottom","fontSize","genFontSize","Select","options","value","valuePropName","Checkbox","QuestionParagraphDefaultProps","_QuestionParagraphDef","_QuestionParagraphDef2","_QuestionParagraphDef3","textList","split","map","t","i","length","QuestionInfoDefaultProps","desc","_QuestionInfoDefaultP","_QuestionInfoDefaultP2","_QuestionInfoDefaultP3","Info","QuestionRadioDefaultProps","isVertical","_QuestionRadioDefault","_QuestionRadioDefault2","_QuestionRadioDefault3","_QuestionRadioDefault4","_QuestionRadioDefault5","Radio","Space","direction","_ref","_props$options","List","fields","add","remove","_Fragment","_ref2","index","key","align","validator","_form$getFieldsValue$","getFieldsValue","filter","v","Promise","resolve","reject","Button","icon","MinusCircleOutlined","onClick","some","nanoid","PlusOutlined","block","_ref$data","data","sum","useMemo","reduce","pre","cV","count","width","height","margin","ResponsiveContainer","PieChart","Pie","dataKey","cx","cy","outerRadius","fill","o","concat","formatPercent","Cell","STAT_COLORS","Tooltip","QuestionCheckboxDefaultProps","list","checked","_QuestionCheckboxDefa","_QuestionCheckboxDefa2","_QuestionCheckboxDefa3","_QuestionCheckboxDefa4","_props$list","BarChart","CartesianGrid","strokeDasharray","XAxis","YAxis","Legend","Bar","GroupType","componentConfGroup","groupName","Text","components","QuestionTitleConfType","QuestionParagraphConfType","QuestionInfoConfType","QuestionInputConfType","QuestionTextareaConfType","QuestionRadioConfType","QuestionCheckboxConfType","componentConfList","_componentConfList","_defineProperty","useSelector","state","present","componentList","selectedId","copiedComponent","selectedComponent","find","c","fe_id","pageInfo","_useParams$id","useParams","id","dispatch","useDispatch","_useRequest","useRequest","Error","getQuestionService","manual","loading","error","run","_data$componentList","isPublished","js","css","resetComponents","resetPageInfo"],"sourceRoot":""}