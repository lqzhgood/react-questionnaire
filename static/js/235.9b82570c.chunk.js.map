{"version":3,"file":"static/js/235.9b82570c.chunk.js","mappings":"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","sources":["webpack://react-questionnaire/./src/demos/pages/Official/Game/Game.module.sass?eb92","demos/pages/Official/Game/Game.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"square\":\"Game_square__chBh-\",\"game\":\"Game_game__nKopB\",\"board\":\"Game_board__hZtWz\"};","import React, { useState } from 'react';\nimport styles from './Game.module.sass';\n\ntype Chess = 'X' | 'O' | null;\ntype props = {\n    value: Chess;\n    clickHandler: () => void;\n};\n\nfunction Square({ value, clickHandler }: props) {\n    return (\n        <button className={styles.square} onClick={clickHandler}>\n            {value}\n        </button>\n    );\n}\n\ntype BoardType = {\n    list: Chess[];\n    isX: boolean;\n    onPlay: (list: Chess[]) => void;\n};\nfunction Board({ list, isX, onPlay }: BoardType) {\n    // const [list, setList] = useState(new Array(9).fill(null));\n    const winner = calculateWinner(list);\n\n    function handleClick(index: number) {\n        if (list[index] || winner) return;\n\n        const newList = [...list];\n        const nextValue = isX ? 'X' : 'O';\n        newList[index] = nextValue;\n\n        onPlay(newList);\n    }\n\n    let status;\n    if (winner) {\n        status = 'Winner: ' + winner;\n    } else {\n        status = 'Next player: ' + (isX ? 'X' : 'O');\n    }\n\n    return (\n        <>\n            {status}\n            <div className='row'>\n                <Square value={list[0]} clickHandler={() => handleClick(0)} />\n                <Square value={list[1]} clickHandler={() => handleClick(1)} />\n                <Square value={list[2]} clickHandler={() => handleClick(2)} />\n            </div>\n            <div className='row'>\n                <Square value={list[3]} clickHandler={() => handleClick(3)} />\n                <Square value={list[4]} clickHandler={() => handleClick(4)} />\n                <Square value={list[5]} clickHandler={() => handleClick(5)} />\n            </div>\n            <div className='row'>\n                <Square value={list[6]} clickHandler={() => handleClick(6)} />\n                <Square value={list[7]} clickHandler={() => handleClick(7)} />\n                <Square value={list[8]} clickHandler={() => handleClick(8)} />\n            </div>\n        </>\n    );\n}\n\nfunction Game() {\n    const [history, setHistory] = useState([new Array(9).fill(null)]);\n    const [currIndex, setCurrIndex] = useState(0);\n\n    const isX = currIndex % 2 === 0;\n    const currentSquares = history[currIndex];\n\n    function handlePlay(list: Chess[]) {\n        const nextHistory = [...history.slice(0, currIndex + 1), list];\n        setHistory(nextHistory);\n        setCurrIndex(nextHistory.length - 1);\n    }\n\n    function jumpTo(i: number) {\n        setCurrIndex(i);\n    }\n\n    const moves = history.map((list, i) => {\n        let description;\n        if (i > 0) {\n            description = 'Go to move #' + i;\n        } else {\n            description = 'Go to game start';\n        }\n        return (\n            <li key={i}>\n                <button onClick={() => jumpTo(i)}>{description}</button>\n            </li>\n        );\n    });\n\n    return (\n        <div className={styles['game']}>\n            <div className={styles['board']}>\n                <Board list={currentSquares} onPlay={handlePlay} isX={isX} />\n            </div>\n            <div className={styles['info']}>\n                <ol>{moves}</ol>\n            </div>\n        </div>\n    );\n}\nexport default Game;\n\nfunction calculateWinner(squares: Chess[]) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n"],"names":["Square","_ref","value","clickHandler","_jsx","className","styles","square","onClick","children","Board","_ref2","status","list","isX","onPlay","winner","squares","lines","i","length","_lines$i","_slicedToArray","a","b","c","calculateWinner","handleClick","index","newList","_toConsumableArray","nextValue","_jsxs","_Fragment","_useState","useState","Array","fill","_useState2","history","setHistory","_useState3","_useState4","currIndex","setCurrIndex","currentSquares","moves","map","description","jumpTo","nextHistory","concat","slice"],"sourceRoot":""}