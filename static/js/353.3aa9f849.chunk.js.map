{"version":3,"file":"static/js/353.3aa9f849.chunk.js","mappings":"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","sources":["demos/pages/Mobx/pages/Basic.tsx","demos/pages/Mobx/pages/TodoList/store.ts","demos/pages/Mobx/pages/TodoList/TodoListFC.tsx","demos/pages/Mobx/pages/TodoList/index.tsx","demos/pages/Mobx/index.tsx"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\nimport { observer } from 'mobx-react';\nimport React, { useEffect } from 'react';\n\nclass Timer {\n    ms = 0;\n    constructor() {\n        makeAutoObservable(this);\n    }\n    increase() {\n        this.ms++;\n    }\n    reset() {\n        this.ms = 0;\n    }\n}\n\nconst myTimer = new Timer();\n\ntype PropsType = { timer: Timer };\n\nconst TimerView = observer((props: PropsType) => {\n    const { timer } = props;\n    return <button onClick={() => timer.reset()}>ms: {timer.ms}</button>;\n});\n\nconst Basic = () => {\n    useEffect(() => {\n        const id = setInterval(() => {\n            myTimer.increase();\n        }, 1000);\n        return () => {\n            clearInterval(id);\n        };\n    }, []);\n\n    return (\n        <div>\n            <h2>Basic</h2>\n            <TimerView timer={myTimer} />\n            <TimerView timer={myTimer} />\n        </div>\n    );\n};\n\nexport default Basic;\n","import { action, computed, makeObservable, observable } from 'mobx';\nimport { nanoid } from 'nanoid';\n\ntype TodoItem = {\n    id: string;\n    title: string;\n    completed: boolean;\n};\n\nexport class ObservableTodoStore {\n    id = '';\n    title = '';\n    completed = false;\n\n    constructor(title: string) {\n        makeObservable(this, {\n            id: observable,\n            title: observable,\n            completed: observable,\n            update: action,\n        });\n\n        this.id = nanoid(5);\n        this.title = title;\n    }\n\n    update(opt: Partial<TodoItem>) {\n        Object.assign(this, opt);\n    }\n}\n\nexport class ObservableTodoListStore {\n    list: ObservableTodoStore[] = [new ObservableTodoStore('吃饭'), new ObservableTodoStore('睡觉')];\n\n    constructor() {\n        makeObservable(this, {\n            list: observable,\n            completedTodosCount: computed,\n            add: action,\n            del: action,\n        });\n    }\n\n    get completedTodosCount() {\n        return this.list.filter(t => t.completed).length;\n    }\n\n    add(title: string) {\n        const todo = new ObservableTodoStore(title);\n        this.list.push(todo);\n    }\n\n    del(id: string) {\n        this.list = this.list.filter(t => t.id !== id);\n    }\n}\n\nexport default new ObservableTodoListStore();\n","import React, { useState } from 'react';\nimport { ObservableTodoListStore } from './store';\nimport { observer } from 'mobx-react';\nimport { Space } from 'antd';\n\ntype Props = {\n    store: ObservableTodoListStore;\n};\n\nconst TodoListFC = observer((props: Props) => {\n    const { store } = props;\n    const [text, setText] = useState('');\n\n    const todoList = store.list;\n\n    return (\n        <>\n            {todoList.map(todo => {\n                const { id, title, completed } = todo;\n                return (\n                    <li key={id}>\n                        <Space>\n                            <input\n                                type='checkbox'\n                                checked={completed}\n                                onChange={() => todo.update({ completed: !completed })}\n                            />\n                            <span style={completed ? { textDecoration: 'line-through', opacity: 0.5 } : {}}>\n                                {title}\n                            </span>\n                            <button onClick={() => store.del(id)}>x</button>\n                        </Space>\n                    </li>\n                );\n            })}\n            <input\n                type='text'\n                value={text}\n                placeholder='enter to add todo'\n                onChange={e => setText(e.target.value)}\n                onKeyDown={e => {\n                    if (e.key !== 'Enter') return;\n                    if (!text.trim()) return;\n                    store.add(text);\n                    setText('');\n                }}\n            />\n        </>\n    );\n});\n\nexport default TodoListFC;\n","import React from 'react';\nimport store from './store';\nimport TodoListFC from './TodoListFC';\nimport { observer } from 'mobx-react';\n\nconst TodoList = observer(() => {\n    return (\n        <div>\n            <h2>TodoList</h2>\n            <p>completed: {store.completedTodosCount}</p>\n            <TodoListFC store={store} />\n        </div>\n    );\n});\n\nexport default TodoList;\n","import React from 'react';\nimport Basic from './pages/Basic';\nimport TodoList from './pages/TodoList';\n\nconst Mobx = () => {\n    return (\n        <div>\n            <h1>Mobx</h1>\n            <Basic />\n            <hr style={{ margin: '20px 0' }} />\n            <TodoList />\n        </div>\n    );\n};\n\nexport default Mobx;\n"],"names":["myTimer","Timer","_classCallCheck","ms","makeAutoObservable","this","_createClass","key","value","TimerView","observer","props","timer","_jsxs","onClick","reset","children","useEffect","id","setInterval","increase","clearInterval","_jsx","ObservableTodoStore","title","completed","makeObservable","observable","update","action","nanoid","opt","Object","assign","ObservableTodoListStore","list","completedTodosCount","computed","add","del","get","filter","t","length","todo","push","TodoListFC","store","_useState","useState","_useState2","_slicedToArray","text","setText","todoList","_Fragment","map","Space","type","checked","onChange","style","textDecoration","opacity","placeholder","e","target","onKeyDown","trim","Basic","margin","TodoList"],"sourceRoot":""}